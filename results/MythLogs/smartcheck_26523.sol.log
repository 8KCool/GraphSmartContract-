solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HODLerParadise
Function name: fallback
PC address: 211
Estimated Gas Usage: 5590 - 26061
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/26523.sol:130

parameters["price_pool"] += msg.value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: register(bytes32), txdata: 0xe1fa8e8408, value: 0x2
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: HODLerParadise
Function name: claim_reward(uint256,bytes32)
PC address: 1816
Estimated Gas Usage: 6405 - 9132
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/26523.sol:84

msg.sender.call.value(final_reward)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: register(bytes32), txdata: 0xe1fa8e8401, value: 0x0
Caller: [ATTACKER], function: claim_reward(uint256,bytes32), txdata: 0x9a6b32e1, value: 0x1

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: HODLerParadise
Function name: claim_reward(uint256,bytes32)
PC address: 1906
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/26523.sol:86

parameters["price_poοl"] -= final_reward

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: register(bytes32), txdata: 0xe1fa8e8401, value: 0x0
Caller: [ATTACKER], function: claim_reward(uint256,bytes32), txdata: 0x9a6b32e1, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HODLerParadise
Function name: refund_and_die()
PC address: 2984
Estimated Gas Usage: 2354 - 3577
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/26523.sol:96

require(parameters["last_hοdler"] + 7 days < now)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: refund_and_die(), txdata: 0xdfceb5ba, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HODLerParadise
Function name: register(bytes32)
PC address: 3575
Estimated Gas Usage: 33274 - 155955
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/26523.sol:42

msg.value * 99

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: register(bytes32), txdata: 0xe1fa8e8420, value: 0x295fad40a57eb50295fad40a57eb50295fad40a57eb50295fad40a57eb50296

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: HODLerParadise
Function name: claim_reward(uint256,bytes32)
PC address: 4276
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: register(bytes32), txdata: 0xe1fa8e8401, value: 0x0
Caller: [ATTACKER], function: claim_reward(uint256,bytes32), txdata: 0x9a6b32e1, value: 0x0

