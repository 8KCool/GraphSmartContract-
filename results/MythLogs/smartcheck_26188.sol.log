solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: EXPERIMENTAL_ETH_AUCTION
Function name: constructor
PC address: 15
Estimated Gas Usage: 20679 - 103408
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/26188.sol:9

now + 14 days

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: EXPERIMENTAL_ETH_AUCTION
Function name: constructor
PC address: 24
Estimated Gas Usage: 20679 - 103408
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/26188.sol:11

now + 16 days

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: EXPERIMENTAL_ETH_AUCTION
Function name: fallback
PC address: 514
Estimated Gas Usage: 5521 - 25616
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/26188.sol:21

PrizeFund+=msg.value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01020101, value: 0x1
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EXPERIMENTAL_ETH_AUCTION
Function name: RevokeBid()
PC address: 560
Estimated Gas Usage: 6164 - 26639
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/26188.sol:60

require(now>EndTime)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: RevokeBid(), txdata: 0x08054fd5, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EXPERIMENTAL_ETH_AUCTION
Function name: kill()
PC address: 812
Estimated Gas Usage: 1102 - 1527
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/26188.sol:68

require(now>SelfDestructTime)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: kill(), txdata: 0x41c0e1b5, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EXPERIMENTAL_ETH_AUCTION
Function name: GetPrizeFund()
PC address: 867
Estimated Gas Usage: 12615 - 53280
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/26188.sol:49

require(now>EndTime)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: GetPrizeFund(), txdata: 0x83fcafbb, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EXPERIMENTAL_ETH_AUCTION
Function name: SendBid()
PC address: 1118
Estimated Gas Usage: 12652 - 53317
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/26188.sol:38

require(now<EndTime)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: SendBid(), txdata: 0xae01c14f, value: 0x1

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: EXPERIMENTAL_ETH_AUCTION
Function name: SendBid()
PC address: 1193
Estimated Gas Usage: 7149 - 27624
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/26188.sol:40

Bids[msg.sender]+=msg.value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: SendBid(), txdata: 0xae01c14f, value: 0x1
Caller: [ATTACKER], function: SendBid(), txdata: 0xae01c14f, value: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

