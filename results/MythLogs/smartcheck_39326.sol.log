solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Builder
Function name: setSecurityCheck(string)
PC address: 242
Estimated Gas Usage: 16779 - 80165
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39326.sol:369

function setSecurityCheck(string _uri) onlyOwner
    { securityCheckURI = _uri; }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d6ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: BuilderCongress
Function name: setSecurityCheck(string)
PC address: 253
Estimated Gas Usage: 16779 - 80165
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39326.sol:369

function setSecurityCheck(string _uri) onlyOwner
    { securityCheckURI = _uri; }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d6ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Builder
Function name: setSecurityCheck(string)
PC address: 263
Estimated Gas Usage: 6639 - 29839
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39326.sol:369

function setSecurityCheck(string _uri) onlyOwner
    { securityCheckURI = _uri; }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: BuilderCongress
Function name: setSecurityCheck(string)
PC address: 274
Estimated Gas Usage: 6639 - 29839
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39326.sol:369

function setSecurityCheck(string _uri) onlyOwner
    { securityCheckURI = _uri; }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Recipient
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 532
Estimated Gas Usage: 1360 - 4608
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/39326.sol:96

_token.transferFrom(_from, this, _value)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb1adadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadaddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Builder
Function name: getLastContract()
PC address: 2111
Estimated Gas Usage: 1273 - 1558
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39326.sol:348

sender_contracts[sender_contracts.length - 1]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0
Caller: [CREATOR], function: getLastContract(), txdata: 0xc53833fe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: BuilderCongress
Function name: getLastContract()
PC address: 2302
Estimated Gas Usage: 1273 - 1558
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39326.sol:348

sender_contracts[sender_contracts.length - 1]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: getLastContract(), txdata: 0xc53833fe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Builder
Function name: getContractsOf(address,uint256)
PC address: 2347
Estimated Gas Usage: 952 - 1237
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39326.sol:343

mapping(address => address[]) public getContractsOf

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0
Caller: [CREATOR], function: getContractsOf(address,uint256), txdata: 0xf70532fe, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: Builder
Function name: securityCheckURI()
PC address: 2414
Estimated Gas Usage: 2841 - 4960
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: /tmp/39326.sol:366

string public securityCheckURI

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0
Caller: [CREATOR], function: securityCheckURI(), txdata: 0xfdc37c85, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: Builder
Function name: securityCheckURI()
PC address: 2466
Estimated Gas Usage: 2841 - 4960
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: /tmp/39326.sol:366

string public securityCheckURI

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0
Caller: [CREATOR], function: securityCheckURI(), txdata: 0xfdc37c85, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: Low
Contract: Builder
Function name: setSecurityCheck(string)
PC address: 2571
Estimated Gas Usage: 16779 - 80165
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: Low
Contract: Builder
Function name: setSecurityCheck(string)
PC address: 2624
Estimated Gas Usage: 6639 - 29839
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: Low
Contract: Builder
Function name: setSecurityCheck(string)
PC address: 2638
Estimated Gas Usage: 6639 - 29839
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: Builder
Function name: setSecurityCheck(string)
PC address: 2647
Estimated Gas Usage: 16669 - 80148
Potential denial-of-service if block gas limit is reached.
A storage modification is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BuilderCongress
Function name: create(uint256,uint256,int256,address,address)
PC address: 3117
Estimated Gas Usage: 19468 - 198686
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: /tmp/39326.sol:405

CreatorCongress.create(minimumQuorumForProposals,
                                          minutesForDebate,
                                          marginOfVotesForMajority,
                                          congressLeader)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: create(uint256,uint256,int256,address,address), txdata: 0xf48d371c, value: 0x1

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: BuilderCongress
Function name: create(uint256,uint256,int256,address,address)
PC address: 3333
Estimated Gas Usage: 4444 - 73948
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/39326.sol:409

inst.setOwner(_client)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: create(uint256,uint256,int256,address,address), txdata: 0xf48d371c0101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x1

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BuilderCongress
Function name: create(uint256,uint256,int256,address,address)
PC address: 3333
Estimated Gas Usage: 18671 - 163703
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: /tmp/39326.sol:409

inst.setOwner(_client)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: create(uint256,uint256,int256,address,address), txdata: 0xf48d371c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: BuilderCongress
Function name: create(uint256,uint256,int256,address,address)
PC address: 3512
Estimated Gas Usage: 6019 - 109899
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/39326.sol:410

inst.setHammer(_client)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: create(uint256,uint256,int256,address,address), txdata: 0xf48d371c0000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x1

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: BuilderCongress
Function name: create(uint256,uint256,int256,address,address)
PC address: 3607
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: create(uint256,uint256,int256,address,address), txdata: 0xf48d371c0101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: BuilderCongress
Function name: create(uint256,uint256,int256,address,address)
PC address: 3694
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/39326.sol:411

getContractsOf[_client].push(inst)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: create(uint256,uint256,int256,address,address), txdata: 0xf48d371c0101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: BuilderCongress
Function name: getContractsOf(address,uint256)
PC address: 3825
Estimated Gas Usage: 974 - 1259
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39326.sol:343

mapping(address => address[]) public getContractsOf

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: getContractsOf(address,uint256), txdata: 0xf70532fe, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: Low
Contract: BuilderCongress
Function name: setSecurityCheck(string)
PC address: 4102
Estimated Gas Usage: 6639 - 29839
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: Low
Contract: BuilderCongress
Function name: setSecurityCheck(string)
PC address: 4116
Estimated Gas Usage: 6639 - 29839
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: BuilderCongress
Function name: setSecurityCheck(string)
PC address: 4125
Estimated Gas Usage: 16669 - 80148
Potential denial-of-service if block gas limit is reached.
A storage modification is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

