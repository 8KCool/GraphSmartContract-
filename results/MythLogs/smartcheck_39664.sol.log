solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: Blockjack
Function name: constructor
PC address: 720
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/39664.sol:384

games[0].player = this

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: Blockjack
Function name: constructor
PC address: 875
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/39664.sol:491

isOwner[DX] = true

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: Blockjack
Function name: constructor
PC address: 997
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/39664.sol:492

isOwner[DEV] = true

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: Blockjack
Function name: constructor
PC address: 1119
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/39664.sol:493

isOwner[ADMIN_CONTRACT] = true

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DeckLib
Function name: cardEmojified(uint8)
PC address: 1371
Estimated Gas Usage: 286 - 381
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39664.sol:54

Suit(self / cardsPerSuit)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: cardEmojified(uint8), txdata: 0x059a7d9393939393939393939393939393939393939393939393939393939393939393f2, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Medium
Contract: DeckLib
Function name: getRandomNumber(uint256,address,uint256,uint256,uint256)
PC address: 1851
Estimated Gas Usage: 829 - 1771
A control flow decision is made based on a predictable variable.
The block hash of a previous block is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/39664.sol:82

if (blockHash == 0x0) throw

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getRandomNumber(uint256,address,uint256,uint256,uint256), txdata: 0xeea6c540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DeckLib
Function name: getRandomNumber(uint256,address,uint256,uint256,uint256)
PC address: 1982
Estimated Gas Usage: 742 - 1403
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39664.sol:83

uint256(keccak256(blockHash, player, gameID, n)) % m

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getRandomNumber(uint256,address,uint256,uint256,uint256), txdata: 0xeea6c540, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Blockjack
Function name: doubleDown(uint256)
PC address: 3996
Estimated Gas Usage: 728 - 823
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39664.sol:369

games[gameID]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: doubleDown(uint256), txdata: 0x27a1d94880, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Blockjack
Function name: gameState(uint256)
PC address: 4741
Estimated Gas Usage: 867 - 962
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39664.sol:471

games[i]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: gameState(uint256), txdata: 0x4e0e1a3e80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Blockjack
Function name: gameTick(uint256)
PC address: 6897
Estimated Gas Usage: 7426 - 27901
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39664.sol:440

games[gameID]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: gameTick(uint256), txdata: 0x91b5682280, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Blockjack
Function name: stand(uint256)
PC address: 7181
Estimated Gas Usage: 1060 - 1155
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39664.sol:369

games[gameID]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: stand(uint256), txdata: 0x96b76c2380, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Blockjack
Function name: hit(uint256)
PC address: 8807
Estimated Gas Usage: 1280 - 1375
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39664.sol:369

games[gameID]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: hit(uint256), txdata: 0xebf6e91d80, value: 0x0

