solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: AutomobileCyberchainToken
Function name: price()
PC address: 4424
Estimated Gas Usage: 3059 - 3435
A control flow decision is made based on a predictable variable.
The block.number environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/21886.sol:159

block.number<startBlock || block.number > endBlock

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: price(), txdata: 0xa035b1fe, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: AutomobileCyberchainToken
Function name: price()
PC address: 4436
Estimated Gas Usage: 3059 - 3435
A control flow decision is made based on a predictable variable.
The block.number environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/21886.sol:159

if (block.number<startBlock || block.number > endBlock) return 0;
        else if (block.number>=startBlock && block.number<startBlock+prePeriod) return preSalePrice;
        else  return crowSalePrice

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: price(), txdata: 0xa035b1fe, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: AutomobileCyberchainToken
Function name: price()
PC address: 4457
Estimated Gas Usage: 3059 - 3435
A control flow decision is made based on a predictable variable.
The block.number environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/21886.sol:160

block.number>=startBlock && block.number<startBlock+prePeriod

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: price(), txdata: 0xa035b1fe, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: AutomobileCyberchainToken
Function name: price()
PC address: 4473
Estimated Gas Usage: 3059 - 3435
A control flow decision is made based on a predictable variable.
The block.number environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/21886.sol:160

if (block.number>=startBlock && block.number<startBlock+prePeriod) return preSalePrice;
        else  return crowSalePrice

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: price(), txdata: 0xa035b1fe, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: AutomobileCyberchainToken
Function name: buy(address,uint256)
PC address: 5190
Estimated Gas Usage: 751 - 1032
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/21886.sol:175

msg.sender.call.value(msg.value - value)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b3, value: 0x0
Caller: [ATTACKER], function: buy(address,uint256), txdata: 0xcce7ec13, value: 0x1

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: AutomobileCyberchainToken
Function name: fallback
PC address: 5783
Estimated Gas Usage: 7149 - 7954
Potential denial-of-service if block gas limit is reached.
A storage modification is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit.
--------------------
In file: /tmp/21886.sol:19

assert(c>=a && c>=b)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x1

