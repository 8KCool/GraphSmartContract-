solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EDUCrowdsale
Function name: constructor
PC address: 584
Estimated Gas Usage: 54184 - 261706
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/13076.sol:471

require(_openingTime >= block.timestamp)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EDUCrowdsale
Function name: constructor
PC address: 845
Estimated Gas Usage: 54184 - 261706
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/13076.sol:530

if (block.timestamp < 1528156799) {
            return 1050;
        } else if (block.timestamp < 1528718400) {
            return 940;
        } else if (block.timestamp < 1529323200) {
            return 865;
        } else if (block.timestamp < 1529928000) {
            return 790;
        } else {
            return 750;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EDUCrowdsale
Function name: constructor
PC address: 869
Estimated Gas Usage: 54184 - 261706
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/13076.sol:532

if (block.timestamp < 1528718400) {
            return 940;
        } else if (block.timestamp < 1529323200) {
            return 865;
        } else if (block.timestamp < 1529928000) {
            return 790;
        } else {
            return 750;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EDUCrowdsale
Function name: constructor
PC address: 893
Estimated Gas Usage: 54184 - 261706
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/13076.sol:534

if (block.timestamp < 1529323200) {
            return 865;
        } else if (block.timestamp < 1529928000) {
            return 790;
        } else {
            return 750;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EDUCrowdsale
Function name: constructor
PC address: 917
Estimated Gas Usage: 54184 - 261706
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/13076.sol:536

if (block.timestamp < 1529928000) {
            return 790;
        } else {
            return 750;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Crowdsale
Function name: fallback
PC address: 965
Estimated Gas Usage: 11450 - 101680
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: /tmp/13076.sol:111

wallet.transfer(msg.value)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x1

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: Crowdsale
Function name: fallback
PC address: 965
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/13076.sol:111

wallet.transfer(msg.value)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x1

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: Crowdsale
Function name: buyTokens(address)
PC address: 1249
Estimated Gas Usage: 7845 - 28741
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/13076.sol:91

token.transfer(_beneficiary, _tokenAmount)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: buyTokens(address), txdata: 0xec8ac4d800000000000000000000000001, value: 0x1

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: EDUCrowdsale
Function name: remainingTokens()
PC address: 2975
Estimated Gas Usage: 2172 - 3398
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/13076.sol:287

token.allowance(tokenWallet, this)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: remainingTokens(), txdata: 0xbf583903, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: ERC827Token
Function name: transferAndCall(address,uint256,bytes)
PC address: 3139
Estimated Gas Usage: 14494 - 59836
Potential denial-of-service if block gas limit is reached.
A message call is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transferAndCall(address,uint256,bytes), txdata: 0x4000aea00000000000000000000000000000000000000000000000000000000000000030, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: ERC827Token
Function name: transferAndCall(address,uint256,bytes)
PC address: 3220
Estimated Gas Usage: 14494 - 59836
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/13076.sol:417

_to.call.value(msg.value)(_data)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transferAndCall(address,uint256,bytes), txdata: 0x4000aea0000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EDUCrowdsale
Function name: getCurrentRate()
PC address: 3432
Estimated Gas Usage: 687 - 1063
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/13076.sol:530

if (block.timestamp < 1528156799) {
            return 1050;
        } else if (block.timestamp < 1528718400) {
            return 940;
        } else if (block.timestamp < 1529323200) {
            return 865;
        } else if (block.timestamp < 1529928000) {
            return 790;
        } else {
            return 750;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getCurrentRate(), txdata: 0xf7fb07b0, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EDUCrowdsale
Function name: getCurrentRate()
PC address: 3454
Estimated Gas Usage: 687 - 1063
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/13076.sol:532

if (block.timestamp < 1528718400) {
            return 940;
        } else if (block.timestamp < 1529323200) {
            return 865;
        } else if (block.timestamp < 1529928000) {
            return 790;
        } else {
            return 750;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getCurrentRate(), txdata: 0xf7fb07b0, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EDUCrowdsale
Function name: getCurrentRate()
PC address: 3476
Estimated Gas Usage: 687 - 1063
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/13076.sol:534

if (block.timestamp < 1529323200) {
            return 865;
        } else if (block.timestamp < 1529928000) {
            return 790;
        } else {
            return 750;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getCurrentRate(), txdata: 0xf7fb07b0, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EDUCrowdsale
Function name: getCurrentRate()
PC address: 3498
Estimated Gas Usage: 687 - 1063
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/13076.sol:536

if (block.timestamp < 1529928000) {
            return 790;
        } else {
            return 750;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getCurrentRate(), txdata: 0xf7fb07b0, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: ERC827Token
Function name: increaseApprovalAndCall(address,uint256,bytes)
PC address: 4098
Estimated Gas Usage: 9059 - 34591
Potential denial-of-service if block gas limit is reached.
A message call is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: increaseApprovalAndCall(address,uint256,bytes), txdata: 0x90db623f0000000000000000000000000000000000000000000000000000000000000021, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: ERC827Token
Function name: increaseApprovalAndCall(address,uint256,bytes)
PC address: 4179
Estimated Gas Usage: 9059 - 34591
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/13076.sol:437

_spender.call.value(msg.value)(_data)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: increaseApprovalAndCall(address,uint256,bytes), txdata: 0x90db623f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: ERC827Token
Function name: transferFromAndCall(address,address,uint256,bytes)
PC address: 4872
Estimated Gas Usage: 21130 - 87612
Potential denial-of-service if block gas limit is reached.
A message call is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transferFromAndCall(address,address,uint256,bytes), txdata: 0xc1d34b89000000000000000000000000000000000000000000000000000000000000002101010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: ERC827Token
Function name: transferFromAndCall(address,address,uint256,bytes)
PC address: 4953
Estimated Gas Usage: 21130 - 87612
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/13076.sol:427

_to.call.value(msg.value)(_data)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transferFromAndCall(address,address,uint256,bytes), txdata: 0xc1d34b890000000000000000000000000000000000000000000000000000000000000030000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: ERC827Token
Function name: approveAndCall(address,uint256,bytes)
PC address: 5103
Estimated Gas Usage: 7858 - 32630
Potential denial-of-service if block gas limit is reached.
A message call is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: approveAndCall(address,uint256,bytes), txdata: 0xcae9ca510000000000000000000000000000000000000000000000000000000000000021, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: ERC827Token
Function name: approveAndCall(address,uint256,bytes)
PC address: 5184
Estimated Gas Usage: 7858 - 32630
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/13076.sol:406

_spender.call.value(msg.value)(_data)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: approveAndCall(address,uint256,bytes), txdata: 0xcae9ca51000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: ERC827Token
Function name: decreaseApprovalAndCall(address,uint256,bytes)
PC address: 5333
Estimated Gas Usage: 9179 - 34711
Potential denial-of-service if block gas limit is reached.
A message call is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: decreaseApprovalAndCall(address,uint256,bytes), txdata: 0xcb3993be0000000000000000000000000000000000000000000000000000000000000021, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: ERC827Token
Function name: decreaseApprovalAndCall(address,uint256,bytes)
PC address: 5414
Estimated Gas Usage: 9022 - 34036
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/13076.sol:448

_spender.call.value(msg.value)(_data)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: decreaseApprovalAndCall(address,uint256,bytes), txdata: 0xcb3993be000000000000000000000000000000000000000000000000000000000000004001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: ERC827Token
Function name: decreaseApprovalAndCall(address,uint256,bytes)
PC address: 5414
Estimated Gas Usage: 9179 - 34711
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/13076.sol:448

_spender.call.value(msg.value)(_data)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: decreaseApprovalAndCall(address,uint256,bytes), txdata: 0xcb3993be000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080, value: 0x0
