solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 3570
Estimated Gas Usage: 1626 - 2427
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/30337.sol:322

certifierDb.isCertifier(msg.sender)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: certify(address,bytes32), txdata: 0x5103a5a3, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 3986
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/30337.sol:354

studentCertifications[student] = Certification({
            certified: true,
            timestamp: now,
            certifier: msg.sender,
            documents: new bytes32[](0),
            index: certifiedStudents.length
        })

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a300000000000000000000000001, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 3997
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/30337.sol:354

studentCertifications[student] = Certification({
            certified: true,
            timestamp: now,
            certifier: msg.sender,
            documents: new bytes32[](0),
            index: certifiedStudents.length
        })

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a300000000000000000000000001, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 4067
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/30337.sol:354

studentCertifications[student] = Certification({
            certified: true,
            timestamp: now,
            certifier: msg.sender,
            documents: new bytes32[](0),
            index: certifiedStudents.length
        })

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a300000000000000000000000001, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 4107
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/30337.sol:354

studentCertifications[student] = Certification({
            certified: true,
            timestamp: now,
            certifier: msg.sender,
            documents: new bytes32[](0),
            index: certifiedStudents.length
        })

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a300000000000000000000000001, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 4331
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/30337.sol:362

studentCertifications[student].documentStatuses[document] = DocumentStatus({
                isValid: true,
                index: studentCertifications[student].documents.length
            })

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 4342
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/30337.sol:362

studentCertifications[student].documentStatuses[document] = DocumentStatus({
                isValid: true,
                index: studentCertifications[student].documents.length
            })

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 4422
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 4473
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a301010101010101010101010101, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 4560
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/30337.sol:368

certifiedStudents.push(student)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a301010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: withdrawPayments()
PC address: 5078
Estimated Gas Usage: 11407 - 52068
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/30337.sol:170

msg.sender.call.value(payment)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: withdrawPayments(), txdata: 0x6103d70b, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: uncertify(address)
PC address: 5794
Estimated Gas Usage: 1788 - 2589
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/30337.sol:322

certifierDb.isCertifier(msg.sender)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: uncertify(address), txdata: 0x9e1e6528, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: CertificationDb
Function name: getCertifiedStudentAtIndex(uint256)
PC address: 7110
Estimated Gas Usage: 14073 - 55225
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/30337.sol:464

certifiedStudents[index]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getCertifiedStudentAtIndex(uint256), txdata: 0xd5582205, value: 0x101010101010101010101010101010101010101010101010101010101010101

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: CertificationDb
Function name: getCertificationDocumentAtIndex(address,uint256)
PC address: 7423
Estimated Gas Usage: 14246 - 55588
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/30337.sol:492

studentCertifications[student].documents[index]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getCertificationDocumentAtIndex(address,uint256), txdata: 0xde629235, value: 0x101010101010101010101010101010101010101010101010101010101010101

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: addCertificationDocument(address,bytes32)
PC address: 7729
Estimated Gas Usage: 1997 - 2798
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/30337.sol:322

certifierDb.isCertifier(msg.sender)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: addCertificationDocument(address,bytes32), txdata: 0xec97cff7, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: removeCertificationDocument(address,bytes32)
PC address: 8008
Estimated Gas Usage: 2019 - 2820
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/30337.sol:322

certifierDb.isCertifier(msg.sender)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: removeCertificationDocument(address,bytes32), txdata: 0xf3ee6305, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 9371
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a300000000000000000000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: Low
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 9383
Estimated Gas Usage: 43504 - 222703
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: certify(address,bytes32), txdata: 0x5103a5a301010101010101010101010101, value: 0x0

