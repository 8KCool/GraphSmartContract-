solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Honey
Function name: GetFreebie()
PC address: 922
Estimated Gas Usage: 3009 - 71806
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: /tmp/27486.sol:13

msg.sender.transfer(this.balance)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: GetFreebie(), txdata: 0x6ea3f1cb, value: 0xde0b6b3a7640001

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: Honey
Function name: GetFreebie()
PC address: 922
Estimated Gas Usage: 2263 - 37060
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: /tmp/27486.sol:13

msg.sender.transfer(this.balance)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: GetFreebie(), txdata: 0x6ea3f1cb, value: 0xde0b6b3a7640001

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: Honey
Function name: Command(address,bytes)
PC address: 1127
Estimated Gas Usage: 1311 - 5496
Potential denial-of-service if block gas limit is reached.
A message call is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: Command(address,bytes), txdata: 0xba21d62a0000000000000000000000000000000000000000000000000000000000000021, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: Honey
Function name: Command(address,bytes)
PC address: 1208
Estimated Gas Usage: 1311 - 5496
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/27486.sol:24

adr.call.value(msg.value)(data)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: Command(address,bytes), txdata: 0xba21d62a0000000000000000000000000000000000000000000000000000000000000021, value: 0x0

==== Unchecked Call Return Value ====
SWC ID: 104
Severity: Low
Contract: Honey
Function name: Command(address,bytes)
PC address: 1208
Estimated Gas Usage: 2035 - 40220
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: /tmp/27486.sol:24

adr.call.value(msg.value)(data)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: Command(address,bytes), txdata: 0xba21d62a0000000000000000000000000000000000000000000000000000000000000021, value: 0x0

