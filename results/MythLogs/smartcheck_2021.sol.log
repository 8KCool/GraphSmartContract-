solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: StackDepthLib
Function name: checkDepth(address,uint256)
PC address: 484
Estimated Gas Usage: 382 - 853
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/2021.sol:60

self.call.gas(GAS_PER_DEPTH * n)(0x21835af6, n - 1)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: checkDepth(address,uint256), txdata: 0x32921690010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef40, value: 0x0

==== Unchecked Call Return Value ====
SWC ID: 104
Severity: Low
Contract: StackDepthLib
Function name: checkDepth(address,uint256)
PC address: 484
Estimated Gas Usage: 1179 - 35931
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: /tmp/2021.sol:60

self.call.gas(GAS_PER_DEPTH * n)(0x21835af6, n - 1)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: checkDepth(address,uint256), txdata: 0x32921690000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: AmbiEnabled
Function name: getAddress(bytes32)
PC address: 796
Estimated Gas Usage: 1509 - 2310
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/2021.sol:20

ambiC.getNodeAddress(_name)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: getAddress(bytes32), txdata: 0x21f8a721, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: AmbiEnabled
Function name: getAddress(bytes32)
PC address: 796
Estimated Gas Usage: 1509 - 2310
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/2021.sol:20

ambiC.getNodeAddress(_name)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getAddress(bytes32), txdata: 0x21f8a721, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: AmbiEnabled
Function name: setAmbiAddress(address,bytes32)
PC address: 1140
Estimated Gas Usage: 1662 - 2463
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/2021.sol:28

ambiContract.getNodeAddress(_name)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523, value: 0x0
Caller: [ATTACKER], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523bebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: RegistryICAP
Function name: updateInstitutionAsset(string,string,address)
PC address: 1174
Estimated Gas Usage: 1855 - 9239
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/2021.sol:283

function updateInstitutionAsset(string _asset, string _institution, address _address) noValue() onlyInstitutionOwner(_institution) returns(bool) {
        bytes32 assetInstitutionHash = sha3(_asset, _institution);
        if (!registered[assetInstitutionHash]) {
            return false;
        }
        institutions[assetInstitutionHash] = _address;
        return true;
    }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: updateInstitutionAsset(string,string,address), txdata: 0x67f10e8cfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc80, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: AmbiEnabled
Function name: setAmbiAddress(address,bytes32)
PC address: 1399
Estimated Gas Usage: 3384 - 38842
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/2021.sol:29

ambiContract.addNode(_name, address(this))

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523, value: 0x0
Caller: [ATTACKER], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AmbiEnabled
Function name: setAmbiAddress(address,bytes32)
PC address: 1399
Estimated Gas Usage: 14796 - 125051
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: /tmp/2021.sol:29

ambiContract.addNode(_name, address(this))

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: AmbiEnabled
Function name: setAmbiAddress(address,bytes32)
PC address: 1481
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/2021.sol:33

name = _name

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523bebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeefbebebebebebebebe0901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: AmbiEnabled
Function name: setAmbiAddress(address,bytes32)
PC address: 1545
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/2021.sol:34

ambiC = ambiContract

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523bebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeefbebebebebebebebe0901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: RegistryICAP
Function name: registerInstitutionAsset(string,string,address)
PC address: 1700
Estimated Gas Usage: 1943 - 9327
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/2021.sol:270

function registerInstitutionAsset(string _asset, string _institution, address _address) noValue() onlyInstitutionOwner(_institution) returns(bool) {
        if (!registered[sha3(_asset)]) {
            return false;
        }
        bytes32 assetInstitutionHash = sha3(_asset, _institution);
        if (registered[assetInstitutionHash]) {
            return false;
        }
        registered[assetInstitutionHash] = true;
        institutions[assetInstitutionHash] = _address;
        return true;
    }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: registerInstitutionAsset(string,string,address), txdata: 0x8f87b786fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc80, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: AmbiEnabled
Function name: remove()
PC address: 1885
Estimated Gas Usage: 2485 - 3806
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/2021.sol:14

ambiC.hasRelation(name, _role, msg.sender)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: remove(), txdata: 0xa7f43779, value: 0x0

==== Unprotected Selfdestruct ====
SWC ID: 106
Severity: High
Contract: AmbiEnabled
Function name: remove()
PC address: 2001
Estimated Gas Usage: 3776 - 39613
The contract can be killed by anyone.
Anyone can kill this contract and withdraw its balance to an arbitrary address.
--------------------
In file: /tmp/2021.sol:47

selfdestruct(msg.sender)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523010101010101010101010101010101010101010101010101010101010101010101010101010101010901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0
Caller: [ATTACKER], function: remove(), txdata: 0xa7f43779, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: AmbiEnabled
Function name: immortality()
PC address: 2334
Estimated Gas Usage: 2507 - 3828
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/2021.sol:14

ambiC.hasRelation(name, _role, msg.sender)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: immortality(), txdata: 0xf7c3ee7a, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: AmbiEnabled
Function name: immortality()
PC address: 2422
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/2021.sol:39

isImmortal = true

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523bebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeefbebebebebebebebe0901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0
Caller: [SOMEGUY], function: immortality(), txdata: 0xf7c3ee7a, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: RegistryICAP
Function name: removeInstitutionAsset(string,string)
PC address: 2442
Estimated Gas Usage: 2040 - 9424
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/2021.sol:292

function removeInstitutionAsset(string _asset, string _institution) noValue() onlyInstitutionOwner(_institution) returns(bool) {
        bytes32 assetInstitutionHash = sha3(_asset, _institution);
        if (!registered[assetInstitutionHash]) {
            return false;
        }
        delete registered[assetInstitutionHash];
        delete institutions[assetInstitutionHash];
        return true;
    }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: removeInstitutionAsset(string,string), txdata: 0xcf82601bfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc80, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: RegistryICAP
Function name: getAddress(bytes32)
PC address: 3760
Estimated Gas Usage: 1531 - 2332
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/2021.sol:20

ambiC.getNodeAddress(_name)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: getAddress(bytes32), txdata: 0x21f8a721, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: RegistryICAP
Function name: setAmbiAddress(address,bytes32)
PC address: 7328
Estimated Gas Usage: 1794 - 2595
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/2021.sol:28

ambiContract.getNodeAddress(_name)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523bebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: RegistryICAP
Function name: setAmbiAddress(address,bytes32)
PC address: 7587
Estimated Gas Usage: 3516 - 38974
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/2021.sol:29

ambiContract.addNode(_name, address(this))

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RegistryICAP
Function name: setAmbiAddress(address,bytes32)
PC address: 7587
Estimated Gas Usage: 14928 - 125183
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: /tmp/2021.sol:29

ambiContract.addNode(_name, address(this))

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: RegistryICAP
Function name: setAmbiAddress(address,bytes32)
PC address: 7669
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/2021.sol:33

name = _name

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523bebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeefbebebebebebebebe0901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: RegistryICAP
Function name: setAmbiAddress(address,bytes32)
PC address: 7733
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/2021.sol:34

ambiC = ambiContract

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setAmbiAddress(address,bytes32), txdata: 0x7948f523bebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeefbebebebebebebebe0901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: RegistryICAP
Function name: prepare(bytes)
PC address: 11253
Estimated Gas Usage: 1566 - 5089
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/2021.sol:200

_bban[i]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: prepare(bytes), txdata: 0xd7768c4780, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: RegistryICAP
Function name: mod9710(bytes)
PC address: 11766
Estimated Gas Usage: 1747 - 4894
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/2021.sol:215

_prepared[i]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: mod9710(bytes), txdata: 0xe98c760880, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: RegistryICAP
Function name: decodeIndirect(bytes)
PC address: 12304
Estimated Gas Usage: 1861 - 13424
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/2021.sol:160

_bban[k++]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: decodeIndirect(bytes), txdata: 0xee9ce09080, value: 0x0
