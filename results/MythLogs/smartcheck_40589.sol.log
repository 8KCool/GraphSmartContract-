solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Order
Function name: fillTheirOrder(address)
PC address: 1017
Estimated Gas Usage: 6011 - 75985
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/40589.sol:66

this.balance / weiPerToken

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: fillTheirOrder(address), txdata: 0xfcc6b5d5, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: Order
Function name: fillTheirOrder(address)
PC address: 1787
Estimated Gas Usage: 1764 - 2660
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/40589.sol:57

token.allowance(msg.sender, address(this))

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: fillTheirOrder(address), txdata: 0xfcc6b5d5, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: Order
Function name: fillTheirOrder(address)
PC address: 2037
Estimated Gas Usage: 3858 - 39646
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/40589.sol:58

token.balanceOf(msg.sender)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: fillTheirOrder(address), txdata: 0xfcc6b5d5, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Order
Function name: fillMyOrder(uint256)
PC address: 2156
Estimated Gas Usage: 6823 - 77429
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/40589.sol:74

numTokens * weiPerToken

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: fillMyOrder(uint256), txdata: 0xd9feeeb601, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Order
Function name: fillOrder(address,uint256)
PC address: 2164
Estimated Gas Usage: 1168 - 1263
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/40589.sol:74

numTokens * weiPerToken / decimalPlaces

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: fillOrder(address,uint256), txdata: 0x9c7264d7000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: Order
Function name: fillOrder(address,uint256)
PC address: 2486
Estimated Gas Usage: 3385 - 4706
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/40589.sol:76

token.transferFrom(_from, owner, numTokens)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: fillOrder(address,uint256), txdata: 0x9c7264d700000000000000000000000000000000000000000000000000000000000000003d, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Order
Function name: fillMyOrder(uint256)
PC address: 2569
Estimated Gas Usage: 6823 - 77429
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/40589.sol:77

numTokens * weiPerToken

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: fillMyOrder(uint256), txdata: 0xd9feeeb601, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: Order
Function name: fillMyOrder(uint256)
PC address: 2779
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/40589.sol:43

to.send(value)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: fillMyOrder(uint256), txdata: 0xd9feeeb640, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: Order
Function name: fillMyOrder(uint256)
PC address: 2779
Estimated Gas Usage: 5131 - 40824
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: /tmp/40589.sol:43

to.send(value)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: fillMyOrder(uint256), txdata: 0xd9feeeb641, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Order
Function name: fillMyOrder(uint256)
PC address: 2830
Estimated Gas Usage: 5908 - 75787
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/40589.sol:44

to.call.value(value)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: fillMyOrder(uint256), txdata: 0xd9feeeb6bb, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: Order
Function name: fillMyOrder(uint256)
PC address: 2830
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/40589.sol:44

to.call.value(value)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: fillMyOrder(uint256), txdata: 0xd9feeeb640, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: Order
Function name: fillMyOrder(uint256)
PC address: 2830
Estimated Gas Usage: 5908 - 75787
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: /tmp/40589.sol:44

to.call.value(value)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: fillMyOrder(uint256), txdata: 0xd9feeeb604, value: 0x0

