solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: DividendToken
Function name: fallback
PC address: 341
Estimated Gas Usage: 12584 - 53311
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/14994.sol:152

msg.value * POINTS_PER_WEI

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: mint(address,uint256), txdata: 0x40c10f19404040404040404040404040404040404040404040404040404040404040404080, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x33ec47ab514e652e99f7863b696052bc82d6c7

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DividendToken
Function name: fallback
PC address: 349
Estimated Gas Usage: 500 - 595
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/14994.sol:152

(msg.value * POINTS_PER_WEI) / totalSupply

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: burn(address,uint256), txdata: 0x9dc29fac, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x1

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: DividendToken
Function name: collectOwedDividends()
PC address: 3585
Estimated Gas Usage: 25156 - 107209
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/14994.sol:243

msg.sender.call.value(_amount)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: collectOwedDividends(), txdata: 0x4d2efe4e, value: 0x0

