solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Reentrance
Function name: donate(address)
PC address: 441
Estimated Gas Usage: 5695 - 25980
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/Reentrance_02.sol:8

balances[_to] += msg.value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: donate(address), txdata: 0x00362a95, value: 0x1
Caller: [ATTACKER], function: donate(address), txdata: 0x00362a95, value: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Reentrance
Function name: withdraw(uint256)
PC address: 586
Estimated Gas Usage: 787 - 1258
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/Reentrance_02.sol:17

msg.sender.call.value(_amount)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0

==== Unchecked Call Return Value ====
SWC ID: 104
Severity: Low
Contract: Reentrance
Function name: withdraw(uint256)
PC address: 586
Estimated Gas Usage: 7032 - 61693
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: /tmp/Reentrance_02.sol:17

msg.sender.call.value(_amount)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: Reentrance
Function name: withdraw(uint256)
PC address: 586
Estimated Gas Usage: 787 - 1258
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: /tmp/Reentrance_02.sol:17

msg.sender.call.value(_amount)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: donate(address), txdata: 0x00362a95bebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x1
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: Reentrance
Function name: withdraw(uint256)
PC address: 666
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/Reentrance_02.sol:20

balances[msg.sender] -= _amount

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0

