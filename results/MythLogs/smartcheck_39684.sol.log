solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: EtherprisesLLC
Function name: addAmendment(string)
PC address: 2040
Estimated Gas Usage: 23695 - 108888
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39684.sol:61

function addAmendment(string newAmendment) ifGeneralManager {


        prose.push(newAmendment);

        AmendmentAdded(newAmendment);
    }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: addAmendment(string), txdata: 0x9883b9f4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: EtherprisesLLC
Function name: createSeries(bytes,uint256,string,string,address)
PC address: 3011
Estimated Gas Usage: 3290 - 13829
Potential denial-of-service if block gas limit is reached.
A message call is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: createSeries(bytes,uint256,string,string,address), txdata: 0x00ad148b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004081, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: EtherprisesLLC
Function name: createSeries(bytes,uint256,string,string,address)
PC address: 3113
Estimated Gas Usage: 3290 - 13829
Potential denial-of-service if block gas limit is reached.
A message call is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: createSeries(bytes,uint256,string,string,address), txdata: 0x00ad148b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: EtherprisesLLC
Function name: createSeries(bytes,uint256,string,string,address)
PC address: 3215
Estimated Gas Usage: 3290 - 13829
Potential denial-of-service if block gas limit is reached.
A message call is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: createSeries(bytes,uint256,string,string,address), txdata: 0x00ad148b00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: EtherprisesLLC
Function name: createSeries(bytes,uint256,string,string,address)
PC address: 3319
Estimated Gas Usage: 3290 - 13829
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/39684.sol:103

SeriesFactory(seriesFactory).createSeries.value(msg.value)(seriesId, name, shares, industry, symbol, msg.sender, extraContract)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: createSeries(bytes,uint256,string,string,address), txdata: 0x00ad148b00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Unchecked Call Return Value ====
SWC ID: 104
Severity: Low
Contract: EtherprisesLLC
Function name: withdraw()
PC address: 4897
Estimated Gas Usage: 2385 - 37326
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: /tmp/39684.sol:51

generalManager.send(this.balance)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EtherprisesLLC
Function name: isExpired(address)
PC address: 5636
Estimated Gas Usage: 1083 - 1649
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/39684.sol:55

if (expiresAt[addr] > now)
            return false;
        else
            return true

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: isExpired(address), txdata: 0xba2eb541, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: EtherprisesLLC
Function name: series(uint256)
PC address: 5928
Estimated Gas Usage: 944 - 1039
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39684.sol:10

address[] public series

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: series(uint256), txdata: 0xdc22cb6a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: EtherprisesLLC
Function name: prose(uint256)
PC address: 5990
Estimated Gas Usage: 966 - 1061
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39684.sol:12

string[] public prose

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: prose(uint256), txdata: 0xf5f9d44f, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: EtherprisesLLC
Function name: addAmendment(string)
PC address: 6254
Estimated Gas Usage: 22412 - 105986
Potential denial-of-service if block gas limit is reached.
A storage modification is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: addAmendment(string), txdata: 0x9883b9f480, value: 0x0

