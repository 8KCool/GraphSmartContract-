solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: DSToken
Function name: constructor
PC address: 422
Estimated Gas Usage: 32731 - 156654
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/9920.sol:386

wlc_.owner()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setOwner(address)
PC address: 529
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/9920.sol:64

owner = owner_

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4bbebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: WhiteList
Function name: addToWhiteList(address[])
PC address: 625
Estimated Gas Usage: 12871 - 58280
Potential denial-of-service if block gas limit is reached.
A storage modification is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit.
--------------------
In file: /tmp/9920.sol:365

for (uint i = 0; i < _addresses.length; i++) {
            whiteList[_addresses[i]] = true;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: removeFromWhiteList(address[]), txdata: 0xb11560c580, value: 0x0
Caller: [CREATOR], function: addToWhiteList(address[]), txdata: 0x740d73f380, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setAuthority(address)
PC address: 751
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/9920.sol:71

authority = authority_

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4bbebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setAuthority(address), txdata: 0x7a9e5e4b, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: DSStop
Function name: stop()
PC address: 787
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/9920.sol:289

stopped = true

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4bbebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: stop(), txdata: 0x07da68f5, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: WhiteList
Function name: removeFromWhiteList(address[])
PC address: 898
Estimated Gas Usage: 12915 - 58324
Potential denial-of-service if block gas limit is reached.
A storage modification is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit.
--------------------
In file: /tmp/9920.sol:372

for (uint i = 0; i < _addresses.length; i++) {
            whiteList[_addresses[i]] = false;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: removeFromWhiteList(address[]), txdata: 0xb11560c580, value: 0x0
Caller: [CREATOR], function: removeFromWhiteList(address[]), txdata: 0xb11560c580, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: DSStop
Function name: setOwner(address)
PC address: 910
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/9920.sol:64

owner = owner_

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4bbebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DSTokenBase
Function name: transferFrom(address,address,uint256)
PC address: 1036
Estimated Gas Usage: 814 - 1099
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/9920.sol:329

assert(_balances[src] >= wad)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: DSStop
Function name: setAuthority(address)
PC address: 1151
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/9920.sol:71

authority = authority_

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4bbebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setAuthority(address), txdata: 0x7a9e5e4b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DSTokenBase
Function name: transferFrom(address,address,uint256)
PC address: 1172
Estimated Gas Usage: 1425 - 2090
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/9920.sol:330

assert(_approvals[src][msg.sender] >= wad)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: DSAuth
Function name: setAuthority(address)
PC address: 1496
Estimated Gas Usage: 2592 - 4243
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/9920.sol:93

authority.canCall(src, this, sig)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: setAuthority(address), txdata: 0x7a9e5e4b, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: DSStop
Function name: start()
PC address: 1544
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/9920.sol:292

stopped = false

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4bbebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DSTokenBase
Function name: transfer(address,uint256)
PC address: 1976
Estimated Gas Usage: 824 - 1109
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/9920.sol:318

assert(_balances[msg.sender] >= wad)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: DSStop
Function name: setAuthority(address)
PC address: 2152
Estimated Gas Usage: 2636 - 4287
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/9920.sol:93

authority.canCall(src, this, sig)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: setAuthority(address), txdata: 0x7a9e5e4b, value: 0x0

