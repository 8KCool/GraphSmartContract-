solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: NamiCrowdSale
Function name: transferToBuyer(address,uint256,address)
PC address: 6863
Estimated Gas Usage: 15206 - 57164
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/5515.sol:753

receiver.tokenFallbackBuyer(msg.sender, _value, _buyer)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transferToBuyer(address,uint256,address), txdata: 0x78044ba5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: NamiCrowdSale
Function name: transferToExchange(address,uint256,uint256)
PC address: 7644
Estimated Gas Usage: 15210 - 57168
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/5515.sol:734

receiver.tokenFallbackExchange(msg.sender, _value, _price)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transferToExchange(address,uint256,uint256), txdata: 0x8d70c0ce000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8028
Estimated Gas Usage: 1510 - 1886
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:556

if (now < 1517443200) {

            return 3450;
        } else if (1517443200 < now && now <= 1518048000) {

            return 2400;
        } else if (1518048000 < now && now <= 1518652800) {

            return 2300;
        } else if (1518652800 < now && now <= 1519257600) {

            return 2200;
        } else if (1519257600 < now && now <= 1519862400) {

            return 2100;
        } else if (1519862400 < now && now <= 1520467200) {

            return 2000;
        } else if (1520467200 < now && now <= 1521072000) {

            return 1900;
        } else if (1521072000 < now && now <= 1521676800) {

            return 1800;
        } else if (1521676800 < now && now <= 1522281600) {

            return 1700;
        } else {
            return binary;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8051
Estimated Gas Usage: 1510 - 1886
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:559

1517443200 < now && now <= 1518048000

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8066
Estimated Gas Usage: 1510 - 1886
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:559

if (1517443200 < now && now <= 1518048000) {

            return 2400;
        } else if (1518048000 < now && now <= 1518652800) {

            return 2300;
        } else if (1518652800 < now && now <= 1519257600) {

            return 2200;
        } else if (1519257600 < now && now <= 1519862400) {

            return 2100;
        } else if (1519862400 < now && now <= 1520467200) {

            return 2000;
        } else if (1520467200 < now && now <= 1521072000) {

            return 1900;
        } else if (1521072000 < now && now <= 1521676800) {

            return 1800;
        } else if (1521676800 < now && now <= 1522281600) {

            return 1700;
        } else {
            return binary;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8089
Estimated Gas Usage: 1510 - 1886
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:562

1518048000 < now && now <= 1518652800

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8104
Estimated Gas Usage: 1510 - 1886
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:562

if (1518048000 < now && now <= 1518652800) {

            return 2300;
        } else if (1518652800 < now && now <= 1519257600) {

            return 2200;
        } else if (1519257600 < now && now <= 1519862400) {

            return 2100;
        } else if (1519862400 < now && now <= 1520467200) {

            return 2000;
        } else if (1520467200 < now && now <= 1521072000) {

            return 1900;
        } else if (1521072000 < now && now <= 1521676800) {

            return 1800;
        } else if (1521676800 < now && now <= 1522281600) {

            return 1700;
        } else {
            return binary;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8127
Estimated Gas Usage: 1510 - 1886
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:565

1518652800 < now && now <= 1519257600

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8142
Estimated Gas Usage: 1510 - 1886
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:565

if (1518652800 < now && now <= 1519257600) {

            return 2200;
        } else if (1519257600 < now && now <= 1519862400) {

            return 2100;
        } else if (1519862400 < now && now <= 1520467200) {

            return 2000;
        } else if (1520467200 < now && now <= 1521072000) {

            return 1900;
        } else if (1521072000 < now && now <= 1521676800) {

            return 1800;
        } else if (1521676800 < now && now <= 1522281600) {

            return 1700;
        } else {
            return binary;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8165
Estimated Gas Usage: 1510 - 1886
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:568

1519257600 < now && now <= 1519862400

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8180
Estimated Gas Usage: 1510 - 1886
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:568

if (1519257600 < now && now <= 1519862400) {

            return 2100;
        } else if (1519862400 < now && now <= 1520467200) {

            return 2000;
        } else if (1520467200 < now && now <= 1521072000) {

            return 1900;
        } else if (1521072000 < now && now <= 1521676800) {

            return 1800;
        } else if (1521676800 < now && now <= 1522281600) {

            return 1700;
        } else {
            return binary;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8203
Estimated Gas Usage: 1510 - 1886
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:571

1519862400 < now && now <= 1520467200

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8218
Estimated Gas Usage: 1510 - 1886
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:571

if (1519862400 < now && now <= 1520467200) {

            return 2000;
        } else if (1520467200 < now && now <= 1521072000) {

            return 1900;
        } else if (1521072000 < now && now <= 1521676800) {

            return 1800;
        } else if (1521676800 < now && now <= 1522281600) {

            return 1700;
        } else {
            return binary;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8241
Estimated Gas Usage: 1510 - 1886
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:574

1520467200 < now && now <= 1521072000

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8256
Estimated Gas Usage: 1510 - 1886
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:574

if (1520467200 < now && now <= 1521072000) {

            return 1900;
        } else if (1521072000 < now && now <= 1521676800) {

            return 1800;
        } else if (1521676800 < now && now <= 1522281600) {

            return 1700;
        } else {
            return binary;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8279
Estimated Gas Usage: 1510 - 1886
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:577

1521072000 < now && now <= 1521676800

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8294
Estimated Gas Usage: 1510 - 1886
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:577

if (1521072000 < now && now <= 1521676800) {

            return 1800;
        } else if (1521676800 < now && now <= 1522281600) {

            return 1700;
        } else {
            return binary;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8317
Estimated Gas Usage: 1406 - 1782
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:580

1521676800 < now && now <= 1522281600

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8332
Estimated Gas Usage: 1406 - 1782
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/5515.sol:580

if (1521676800 < now && now <= 1522281600) {

            return 1700;
        } else {
            return binary;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: NamiCrowdSale
Function name: transferToExchange(address,uint256,uint256)
PC address: 11266
Estimated Gas Usage: 1865 - 2150
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/5515.sol:776

assert(b <= a)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transferToExchange(address,uint256,uint256), txdata: 0x8d70c0ce, value: 0x0
Caller: [ATTACKER], function: transferToExchange(address,uint256,uint256), txdata: 0x8d70c0ce000000000000000000000000000000000000000000000000000000000000000011, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: NamiCrowdSale
Function name: migrateForInvestor()
PC address: 11476
Estimated Gas Usage: 2128 - 2929
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/5515.sol:689

presale.balanceOf(_from)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: migrateForInvestor(), txdata: 0xe0c6d1ed, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: NamiCrowdSale
Function name: migrateForInvestor()
PC address: 11707
Estimated Gas Usage: 3816 - 39179
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/5515.sol:692

presale.burnTokens(_from)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: migrateForInvestor(), txdata: 0xe0c6d1ed, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: NamiCrowdSale
Function name: migrateForInvestor()
PC address: 11876
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/5515.sol:694

balanceOf[_to] = balanceOf[_to].add(newToken)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: migrateForInvestor(), txdata: 0xe0c6d1ed, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: NamiCrowdSale
Function name: migrateForInvestor()
PC address: 11903
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/5515.sol:696

totalSupply = totalSupply.add(newToken)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: migrateForInvestor(), txdata: 0xe0c6d1ed, value: 0x0