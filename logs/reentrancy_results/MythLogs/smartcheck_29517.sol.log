solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Distribution
Function name: doDistributionRange(uint256,address[],uint256[])
PC address: 169
Estimated Gas Usage: 12880 - 59088
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/29517.sol:98

function doDistributionRange(uint256 start, address[] contributors,
                               uint256[] contributorExpectedTokens) public {
    require(contributors.length == contributorExpectedTokens.length);

    uint256 tokensTransferredSoFar = tokensTransferred;
    uint256 end = start + contributors.length;
    State _state = state;
    for (uint256 i = start; i < end; ++i) {
      address contributor = contributors[i];
      uint256 expectedTokens = contributorExpectedTokens[i];
      require(contributionHashes[i] == keccak256(contributor, expectedTokens));
      contributionHashes[i] = 0x00000000000000000000000000000000;

      uint256 numTokens = _numTokensForContributor(expectedTokens, tokensTransferredSoFar, _state);
      tokensTransferredSoFar += numTokens;
      require(tokenContract.transfer(contributor, numTokens));
    }

    tokensTransferred = tokensTransferredSoFar;
    if (tokensTransferred == actualTotalTokens) {
      state = State.Done;
    }
  }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: doDistributionRange(uint256,address[],uint256[]), txdata: 0x4a0a7f2df8fffffffffffff64703ba0206bfffffffffffff000000b01000f00000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd80, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Distribution
Function name: doDistributionRange(uint256,address[],uint256[])
PC address: 236
Estimated Gas Usage: 12880 - 59088
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/29517.sol:98

function doDistributionRange(uint256 start, address[] contributors,
                               uint256[] contributorExpectedTokens) public {
    require(contributors.length == contributorExpectedTokens.length);

    uint256 tokensTransferredSoFar = tokensTransferred;
    uint256 end = start + contributors.length;
    State _state = state;
    for (uint256 i = start; i < end; ++i) {
      address contributor = contributors[i];
      uint256 expectedTokens = contributorExpectedTokens[i];
      require(contributionHashes[i] == keccak256(contributor, expectedTokens));
      contributionHashes[i] = 0x00000000000000000000000000000000;

      uint256 numTokens = _numTokensForContributor(expectedTokens, tokensTransferredSoFar, _state);
      tokensTransferredSoFar += numTokens;
      require(tokenContract.transfer(contributor, numTokens));
    }

    tokensTransferred = tokensTransferredSoFar;
    if (tokensTransferred == actualTotalTokens) {
      state = State.Done;
    }
  }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: doDistributionRange(uint256,address[],uint256[]), txdata: 0x4a0a7f2dffffffffffffffffffffffff7fffffffffffffffe090ffffab000003ff0000048000000000000000000000000000000000000000000000000000000000000030fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Distribution
Function name: doDistributionRange(uint256,address[],uint256[])
PC address: 729
Estimated Gas Usage: 12880 - 59088
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/29517.sol:103

start + contributors.length

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: doDistributionRange(uint256,address[],uint256[]), txdata: 0x4a0a7f2db8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Distribution
Function name: doDistributionRange(uint256,address[],uint256[])
PC address: 774
Estimated Gas Usage: 1560 - 7531
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/29517.sol:106

contributors[i]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: doDistributionRange(uint256,address[],uint256[]), txdata: 0x4a0a7f2d, value: 0x0
Caller: [CREATOR], function: doDistributionRange(uint256,address[],uint256[]), txdata: 0x4a0a7f2d10, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Distribution
Function name: doDistributionRange(uint256,address[],uint256[])
PC address: 920
Estimated Gas Usage: 2226 - 8900
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/29517.sol:108

contributionHashes[i]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: doDistributionRange(uint256,address[],uint256[]), txdata: 0x4a0a7f2d00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: Distribution
Function name: temporaryEscapeHatch(address,uint256,bytes)
PC address: 1529
Estimated Gas Usage: 1341 - 5526
Potential denial-of-service if block gas limit is reached.
A message call is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: temporaryEscapeHatch(address,uint256,bytes), txdata: 0x7832bbf70000000000000000000000000000000000000000000000000000000000000021, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DistributionForTesting
Function name: getContributionHashByIndex(uint256)
PC address: 1544
Estimated Gas Usage: 661 - 756
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/29517.sol:161

Distribution.contributionHashes[contributorIndex]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: getContributionHashByIndex(uint256), txdata: 0x1f1eef6b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Distribution
Function name: temporaryEscapeHatch(address,uint256,bytes)
PC address: 1610
Estimated Gas Usage: 1200 - 4679
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/29517.sol:129

to.call.value(value)(data)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: doDistributionRange(uint256,address[],uint256[]), txdata: 0x4a0a7f2d, value: 0x0
Caller: [ATTACKER], function: temporaryEscapeHatch(address,uint256,bytes), txdata: 0x7832bbf7000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: Distribution
Function name: temporaryEscapeHatch(address,uint256,bytes)
PC address: 1610
Estimated Gas Usage: 1125 - 4416
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: /tmp/29517.sol:129

to.call.value(value)(data)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: temporaryEscapeHatch(address,uint256,bytes), txdata: 0x7832bbf7000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000100000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Distribution
Function name: temporaryKill(address)
PC address: 1915
Estimated Gas Usage: 2019 - 3150
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/29517.sol:134

tokenContract.balanceOf(this)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: doDistributionRange(uint256,address[],uint256[]), txdata: 0x4a0a7f2d, value: 0x0
Caller: [ATTACKER], function: temporaryKill(address), txdata: 0xc3d68a85, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Distribution
Function name: doDistribution(uint256,address,uint256)
PC address: 2117
Estimated Gas Usage: 917 - 1388
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/29517.sol:85

contributionHashes[contributorIndex]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: doDistributionRange(uint256,address[],uint256[]), txdata: 0x4a0a7f2d, value: 0x0
Caller: [SOMEGUY], function: doDistribution(uint256,address,uint256), txdata: 0xc45849c2, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Distribution
Function name: handleTokensReceived()
PC address: 2796
Estimated Gas Usage: 2042 - 3173
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/29517.sol:49

tokenContract.balanceOf(this)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: handleTokensReceived(), txdata: 0xde7383e0, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: Distribution
Function name: handleTokensReceived()
PC address: 2876
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/29517.sol:52

tokensTransferred = 0

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: handleTokensReceived(), txdata: 0xde7383e0, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: Distribution
Function name: handleTokensReceived()
PC address: 2921
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/29517.sol:54

state = State.DistributingNormally

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: handleTokensReceived(), txdata: 0xde7383e0, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: Distribution
Function name: handleTokensReceived()
PC address: 2933
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/29517.sol:56

actualTotalTokens = totalTokens

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: handleTokensReceived(), txdata: 0xde7383e0, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: Distribution
Function name: handleTokensReceived()
PC address: 2969
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/29517.sol:57

state = State.DistributingProRata

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: handleTokensReceived(), txdata: 0xde7383e0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: DistributionForTesting
Function name: temporaryKill(address)
PC address: 3069
Estimated Gas Usage: 2195 - 3326
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/29517.sol:134

tokenContract.balanceOf(this)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: temporaryKill(address), txdata: 0xc3d68a85, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Distribution
Function name: numTokensForContributor(uint256)
PC address: 3081
Estimated Gas Usage: 2228 - 2653
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/29517.sol:67

actualTotalTokens.mul(contributorExpectedTokens) / expectedTotalTokens

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: handleTokensReceived(), txdata: 0xde7383e0, value: 0x0
Caller: [CREATOR], function: numTokensForContributor(uint256), txdata: 0x60808037, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DistributionForTesting
Function name: doDistribution(uint256,address,uint256)
PC address: 3271
Estimated Gas Usage: 1093 - 1564
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/29517.sol:85

contributionHashes[contributorIndex]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: doDistribution(uint256,address,uint256), txdata: 0xc45849c2, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: DistributionForTesting
Function name: handleTokensReceived()
PC address: 3960
Estimated Gas Usage: 2240 - 3371
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/29517.sol:49

tokenContract.balanceOf(this)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: handleTokensReceived(), txdata: 0xde7383e0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DistributionForTesting
Function name: getNumTokensForContributorInternal(uint256,uint256,uint8)
PC address: 4167
Estimated Gas Usage: 333 - 428
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/29517.sol:64

_state == State.DistributingNormally

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getNumTokensForContributorInternal(uint256,uint256,uint8), txdata: 0x0920d9a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a004, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DistributionForTesting
Function name: getNumTokensForContributorInternal(uint256,uint256,uint8)
PC address: 4245
Estimated Gas Usage: 1364 - 1459
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/29517.sol:67

actualTotalTokens.mul(contributorExpectedTokens) / expectedTotalTokens

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: getNumTokensForContributorInternal(uint256,uint256,uint8), txdata: 0x0920d9a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a002, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DistributionForTesting
Function name: getNumTokensForContributorInternal(uint256,uint256,uint8)
PC address: 4254
Estimated Gas Usage: 1940 - 2316
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: /tmp/29517.sol:70

actualTotalTokens - _tokensTransferred

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: getNumTokensForContributorInternal(uint256,uint256,uint8), txdata: 0x0920d9a0808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080018080808080808080808080808080808080808080808080808080808080808002, value: 0x0


Exception ignored in: <bound method AstRef.__del__ of False>
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/z3/z3.py", line 305, in __del__
    Z3_dec_ref(self.ctx.ref(), self.as_ast())
  File "/usr/local/lib/python3.6/dist-packages/z3/z3core.py", line 1417, in Z3_dec_ref
    _elems.f(a0, a1)
ctypes.ArgumentError: argument 2: <class 'KeyboardInterrupt'>:
