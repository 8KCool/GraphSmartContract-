solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Builder
Function name: setSecurityCheck(string)
PC address: 220
Estimated Gas Usage: 16779 - 80165
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39932.sol:138

function setSecurityCheck(string _uri) onlyOwner
    { securityCheckURI = _uri; }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d6ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: BuilderInvoice
Function name: setSecurityCheck(string)
PC address: 231
Estimated Gas Usage: 11709 - 55002
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39932.sol:138

function setSecurityCheck(string _uri) onlyOwner
    { securityCheckURI = _uri; }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d6ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Builder
Function name: setSecurityCheck(string)
PC address: 241
Estimated Gas Usage: 6639 - 29839
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39932.sol:138

function setSecurityCheck(string _uri) onlyOwner
    { securityCheckURI = _uri; }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: BuilderInvoice
Function name: setSecurityCheck(string)
PC address: 252
Estimated Gas Usage: 6639 - 29839
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39932.sol:138

function setSecurityCheck(string _uri) onlyOwner
    { securityCheckURI = _uri; }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: Invoice
Function name: withdraw()
PC address: 1312
Estimated Gas Usage: 3192 - 4323
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/39932.sol:73

comission.process.value(value)(beneficiary)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x01010101, value: 0x0
Caller: [CREATOR], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Builder
Function name: getLastContract()
PC address: 1929
Estimated Gas Usage: 1251 - 1536
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39932.sol:117

sender_contracts[sender_contracts.length - 1]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0
Caller: [ATTACKER], function: getLastContract(), txdata: 0xc53833fe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Builder
Function name: getContractsOf(address,uint256)
PC address: 2005
Estimated Gas Usage: 908 - 1193
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39932.sol:112

mapping(address => address[]) public getContractsOf

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0
Caller: [ATTACKER], function: getContractsOf(address,uint256), txdata: 0xf70532fe, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: Builder
Function name: securityCheckURI()
PC address: 2072
Estimated Gas Usage: 2731 - 4332
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: /tmp/39932.sol:135

string public securityCheckURI

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0
Caller: [ATTACKER], function: securityCheckURI(), txdata: 0xfdc37c85, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: Builder
Function name: securityCheckURI()
PC address: 2124
Estimated Gas Usage: 2797 - 4916
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: /tmp/39932.sol:135

string public securityCheckURI

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0
Caller: [ATTACKER], function: securityCheckURI(), txdata: 0xfdc37c85, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: Low
Contract: Builder
Function name: setSecurityCheck(string)
PC address: 2229
Estimated Gas Usage: 16779 - 80165
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: Low
Contract: Builder
Function name: setSecurityCheck(string)
PC address: 2282
Estimated Gas Usage: 6639 - 29839
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: Low
Contract: Builder
Function name: setSecurityCheck(string)
PC address: 2296
Estimated Gas Usage: 6639 - 29839
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: Builder
Function name: setSecurityCheck(string)
PC address: 2305
Estimated Gas Usage: 16669 - 80148
Potential denial-of-service if block gas limit is reached.
A storage modification is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: BuilderInvoice
Function name: create(address,string,bytes32,uint256,address)
PC address: 2676
Estimated Gas Usage: 4839 - 77587
Potential denial-of-service if block gas limit is reached.
A message call is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: create(address,string,bytes32,uint256,address), txdata: 0xb84c11da0000000000000000000000000000000000000000000000000000000000000040, value: 0x1

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: BuilderInvoice
Function name: create(address,string,bytes32,uint256,address)
PC address: 2991
Estimated Gas Usage: 4839 - 77587
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/39932.sol:171

inst.delegate(_client)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: create(address,string,bytes32,uint256,address), txdata: 0xb84c11da0000000000000000000000000000000000000000000000000000000000000040, value: 0x1

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: BuilderInvoice
Function name: create(address,string,bytes32,uint256,address)
PC address: 3176
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: create(address,string,bytes32,uint256,address), txdata: 0xb84c11da000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: BuilderInvoice
Function name: getLastContract()
PC address: 3366
Estimated Gas Usage: 1273 - 1558
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39932.sol:117

sender_contracts[sender_contracts.length - 1]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: getLastContract(), txdata: 0xc53833fe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: BuilderInvoice
Function name: getContractsOf(address,uint256)
PC address: 3442
Estimated Gas Usage: 930 - 1215
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39932.sol:112

mapping(address => address[]) public getContractsOf

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: getContractsOf(address,uint256), txdata: 0xf70532fe, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: Low
Contract: BuilderInvoice
Function name: setSecurityCheck(string)
PC address: 3719
Estimated Gas Usage: 6639 - 29839
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: Low
Contract: BuilderInvoice
Function name: setSecurityCheck(string)
PC address: 3733
Estimated Gas Usage: 6639 - 29839
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: BuilderInvoice
Function name: setSecurityCheck(string)
PC address: 3742
Estimated Gas Usage: 16669 - 80148
Potential denial-of-service if block gas limit is reached.
A storage modification is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSecurityCheck(string), txdata: 0x03ca71d680, value: 0x0

