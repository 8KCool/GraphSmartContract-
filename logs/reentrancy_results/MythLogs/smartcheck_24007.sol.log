solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GetSomeEther
Function name: Kill()
PC address: 692
Estimated Gas Usage: 1497 - 2252
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/24007.sol:31

if(msg.sender==creator && now>LastExtractTime + 2 days) {
            selfdestruct(creator);
        } else
                   revert()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: Kill(), txdata: 0xbe26733c, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: GetSomeEther
Function name: PutEther()
PC address: 762
Estimated Gas Usage: 1019 - 1114
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/24007.sol:26

freeEther+msg.value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: PutEther(), txdata: 0xc039d6db, value: 0x1
Caller: [SOMEGUY], function: PutEther(), txdata: 0xc039d6db, value: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: GetSomeEther
Function name: Deposit()
PC address: 835
Estimated Gas Usage: 16633 - 76918
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/24007.sol:12

now + 2 days

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: PutEther(), txdata: 0xc039d6db, value: 0x2c68af0bb140000
Caller: [CREATOR], function: Deposit(), txdata: 0xed21248c, value: 0x2c68af0bb140001

