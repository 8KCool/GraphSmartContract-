solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: DrainMe
Function name: callFirstTarget()
PC address: 1514
Estimated Gas Usage: 1161 - 2292
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/16057.sol:93

firstTarget.call.value(msg.value)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: becomePlayer(), txdata: 0x56075a98, value: 0x470de4df820000
Caller: [CREATOR], function: callFirstTarget(), txdata: 0x066d4701, value: 0x11c37937e08000

==== Unchecked Call Return Value ====
SWC ID: 104
Severity: Low
Contract: DrainMe
Function name: callFirstTarget()
PC address: 1514
Estimated Gas Usage: 1881 - 37012
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: /tmp/16057.sol:93

firstTarget.call.value(msg.value)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: becomePlayer(), txdata: 0x56075a98, value: 0x470de4df820000
Caller: [CREATOR], function: callFirstTarget(), txdata: 0x066d4701, value: 0x11c37937e08000

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: DrainMe
Function name: callSecondTarget()
PC address: 1705
Estimated Gas Usage: 1183 - 2314
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/16057.sol:98

secondTarget.call.value(msg.value)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: becomePlayer(), txdata: 0x56075a98, value: 0x470de4df820000
Caller: [CREATOR], function: callSecondTarget(), txdata: 0x1d263b53, value: 0x11c37937e08000

==== Unchecked Call Return Value ====
SWC ID: 104
Severity: Low
Contract: DrainMe
Function name: callSecondTarget()
PC address: 1705
Estimated Gas Usage: 1903 - 37034
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: /tmp/16057.sol:98

secondTarget.call.value(msg.value)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: becomePlayer(), txdata: 0x56075a98, value: 0x470de4df820000
Caller: [CREATOR], function: callSecondTarget(), txdata: 0x1d263b53, value: 0x11c37937e08000

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DrainMe
Function name: setSeed(uint256,uint256)
PC address: 1815
Estimated Gas Usage: 1212 - 1827
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/16057.sol:102

seed[_index]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: becomePlayer(), txdata: 0x56075a98, value: 0x470de4df820000
Caller: [SOMEGUY], function: setSeed(uint256,uint256), txdata: 0x1d7915ad80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DrainMe
Function name: balance(uint256)
PC address: 2152
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/16057.sol:22

uint256[] public balance

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: becomePlayer(), txdata: 0x56075a98, value: 0x470de4df820000
Caller: [CREATOR], function: balance(uint256), txdata: 0x47bb89f0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DrainMe
Function name: seed(uint256)
PC address: 2952
Estimated Gas Usage: 856 - 951
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/16057.sol:21

uint256[] public seed = [951828771,158769871220]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: becomePlayer(), txdata: 0x56075a98, value: 0x470de4df820000
Caller: [CREATOR], function: seed(uint256), txdata: 0x9556483780, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: DrainMe
Function name: winPrize()
PC address: 3178
Estimated Gas Usage: 1345 - 2286
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/16057.sol:124

owner.call.value(1 wei)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: DranMe(), txdata: 0x2a8de0ca, value: 0x0
Caller: [ATTACKER], function: winPrize(), txdata: 0xb11cc099, value: 0x0

==== Unchecked Call Return Value ====
SWC ID: 104
Severity: Low
Contract: DrainMe
Function name: winPrize()
PC address: 3178
Estimated Gas Usage: 2065 - 37006
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: /tmp/16057.sol:124

owner.call.value(1 wei)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: DranMe(), txdata: 0x2a8de0ca, value: 0x0
Caller: [CREATOR], function: winPrize(), txdata: 0xb11cc099, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: DrainMe
Function name: winPrize()
PC address: 3178
Estimated Gas Usage: 1345 - 2286
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: /tmp/16057.sol:124

owner.call.value(1 wei)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: DranMe(), txdata: 0x2a8de0ca, value: 0x0
Caller: [ATTACKER], function: winPrize(), txdata: 0xb11cc099, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DrainMe
Function name: players(uint256)
PC address: 3606
Estimated Gas Usage: 1098 - 1193
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/16057.sol:16

address[] public players

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: becomePlayer(), txdata: 0x56075a98, value: 0x470de4df820000
Caller: [CREATOR], function: players(uint256), txdata: 0xf71d96cb80, value: 0x0

