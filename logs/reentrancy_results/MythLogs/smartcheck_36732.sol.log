solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: EnjinBuyer
Function name: fallback
PC address: 417
Estimated Gas Usage: 7319 - 28264
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/36732.sol:176

balances[msg.sender] += msg.value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x04010201, value: 0x1
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EnjinBuyer
Function name: claim_bounty()
PC address: 1515
Estimated Gas Usage: 1861 - 2286
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/36732.sol:156

if (now < earliest_buy_time) return;

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: claim_bounty(), txdata: 0x02f58015, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: EnjinBuyer
Function name: activate_kill_switch(string)
PC address: 2365
Estimated Gas Usage: 12919 - 57761
Potential denial-of-service if block gas limit is reached.
A message call is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: activate_kill_switch(string), txdata: 0xd4701c3580, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EnjinBuyer
Function name: withdraw(address,address)
PC address: 2914
Estimated Gas Usage: 2063 - 2678
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/36732.sol:91

require(bought_tokens || now > earliest_buy_time + 1 hours)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: withdraw(address,address), txdata: 0xf940e385bebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeee, value: 0x0

