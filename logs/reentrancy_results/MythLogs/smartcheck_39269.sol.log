solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Bakt
Function name: pendingTxs(uint256)
PC address: 7185
Estimated Gas Usage: 588 - 683
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39269.sol:303

TX[256] public pendingTxs

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: blockPendingTx(uint256), txdata: 0x6b1e0420, value: 0x0
Caller: [ATTACKER], function: pendingTxs(uint256), txdata: 0x6a53f98a80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Bakt
Function name: blockPendingTx(uint256)
PC address: 8109
Estimated Gas Usage: 2092 - 2707
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39269.sol:780

pendingTxs[_txIdx]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: blockPendingTx(uint256), txdata: 0x6b1e0420, value: 0x0
Caller: [CREATOR], function: blockPendingTx(uint256), txdata: 0x6b1e042080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Bakt
Function name: holderIndex(uint256)
PC address: 12470
Estimated Gas Usage: 918 - 1013
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/39269.sol:299

address[256] public holderIndex

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: blockPendingTx(uint256), txdata: 0x6b1e0420, value: 0x0
Caller: [ATTACKER], function: holderIndex(uint256), txdata: 0xad810fe580, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: Bakt
Function name: etherBalanceOf(address)
PC address: 15682
Estimated Gas Usage: 2150 - 2716
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: /tmp/39269.sol:1038

dividendPoints - _holder.lastClaimed

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: etherBalanceOf(address), txdata: 0x179fc99f0101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Bakt
Function name: etherBalanceOf(address)
PC address: 15683
Estimated Gas Usage: 2150 - 2716
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39269.sol:1038

(dividendPoints - _holder.lastClaimed) * _holder.tokenBalance

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: etherBalanceOf(address), txdata: 0x179fc99f8080808080808080808080808080808080808080808080808080808080808080, value: 0x0

