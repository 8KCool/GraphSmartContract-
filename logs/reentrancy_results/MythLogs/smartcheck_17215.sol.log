solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ReceivingContract
Function name: tokenFallback(address,uint256,bytes)
PC address: 146
Estimated Gas Usage: 1163 - 6527
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/17215.sol:66

function tokenFallback(address _from, uint _value, bytes _data) public pure {
        TKN memory tkn;
        tkn.sender = _from;
        tkn.value = _value;
        tkn.data = _data;
        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);

        tkn.sig = bytes4(u);
    }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a010101010101010101010101010101010101010101010101010101010107fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: ReceivingContract
Function name: tokenFallback(address,uint256,bytes)
PC address: 318
Estimated Gas Usage: 691 - 4319
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/17215.sol:71

_data[0]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: ReceivingContract
Function name: tokenFallback(address,uint256,bytes)
PC address: 456
Estimated Gas Usage: 804 - 4948
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/17215.sol:71

_data[1]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: ReceivingContract
Function name: tokenFallback(address,uint256,bytes)
PC address: 594
Estimated Gas Usage: 917 - 5577
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/17215.sol:71

_data[2]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a0000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: ReceivingContract
Function name: tokenFallback(address,uint256,bytes)
PC address: 730
Estimated Gas Usage: 1027 - 6203
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/17215.sol:71

_data[3]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a0000000000000000000000000000000000000000000000000000000000000003, value: 0x0

