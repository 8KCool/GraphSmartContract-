solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ContractReceiver
Function name: tokenFallback(address,uint48,bytes)
PC address: 154
Estimated Gas Usage: 1193 - 6557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/35637.sol:33

function tokenFallback(address _from, uint48 _value, bytes _data){
      TKN memory tkn;
      tkn.sender = _from;
      tkn.value = _value;
      tkn.data = _data;
      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);
      tkn.sig = bytes4(u);


    }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: tokenFallback(address,uint48,bytes), txdata: 0xe153b74e0101010101010101010101010101010101010101010101010101010107fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: ContractReceiver
Function name: tokenFallback(address,uint48,bytes)
PC address: 344
Estimated Gas Usage: 721 - 4349
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/35637.sol:38

_data[0]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: tokenFallback(address,uint48,bytes), txdata: 0xe153b74e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: ContractReceiver
Function name: tokenFallback(address,uint48,bytes)
PC address: 482
Estimated Gas Usage: 834 - 4978
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/35637.sol:38

_data[1]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: tokenFallback(address,uint48,bytes), txdata: 0xe153b74e0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: ContractReceiver
Function name: tokenFallback(address,uint48,bytes)
PC address: 620
Estimated Gas Usage: 947 - 5607
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/35637.sol:38

_data[2]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: tokenFallback(address,uint48,bytes), txdata: 0xe153b74e0000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: ContractReceiver
Function name: tokenFallback(address,uint48,bytes)
PC address: 756
Estimated Gas Usage: 1057 - 6233
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/35637.sol:38

_data[3]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: tokenFallback(address,uint48,bytes), txdata: 0xe153b74e0000000000000000000000000000000000000000000000000000000000000003, value: 0x0

