solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: InvestmentRecord
Function name: expiredLockPeriod()
PC address: 607
Estimated Gas Usage: 1138 - 1514
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/11705.sol:311

timeStamp + lockPeriod

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: expiredLockPeriod(), txdata: 0xe5a3c771, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: InvestmentRecordList
Function name: getInvestmentRecord(uint256)
PC address: 724
Estimated Gas Usage: 617 - 712
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/11705.sol:260

investmentRecords[index]

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: getInvestmentRecord(uint256), txdata: 0x0352017b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Erc20Wallet
Function name: depositToken(address,uint256)
PC address: 954
Estimated Gas Usage: 1185 - 1846
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/11705.sol:112

ERC20(token).transferFrom(msg.sender, this, amount)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: depositToken(address,uint256), txdata: 0x338b5deabebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: SplitErc20Payment
Function name: payees(uint256)
PC address: 1590
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/11705.sol:134

address[] public payees

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: deposit(), txdata: 0xd0e30db0, value: 0x1
Caller: [CREATOR], function: payees(uint256), txdata: 0x63037b0c80, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Erc20Wallet
Function name: withdrawToken(address,uint256)
PC address: 1681
Estimated Gas Usage: 12145 - 53376
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/11705.sol:98

msg.sender.call.value(value)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: withdrawToken(address,uint256), txdata: 0x9e281a98, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Erc20Wallet
Function name: withdrawToken(address,uint256)
PC address: 1856
Estimated Gas Usage: 12975 - 54491
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/11705.sol:98

ERC20(token).transfer(msg.sender, value)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: withdrawToken(address,uint256), txdata: 0x9e281a98000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: Erc20Wallet
Function name: depositToken(address,uint256)
PC address: 2354
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/11705.sol:86

tokens[token][msg.sender] += value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: depositToken(address,uint256), txdata: 0x338b5deabebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: Erc20Wallet
Function name: depositToken(address,uint256)
PC address: 2431
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/11705.sol:87

totalDeposited[token] += value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: depositToken(address,uint256), txdata: 0x338b5deabebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: SplitErc20Payment
Function name: depositToken(address,uint256)
PC address: 3119
Estimated Gas Usage: 1228 - 1889
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/11705.sol:112

ERC20(token).transferFrom(msg.sender, this, amount)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: depositToken(address,uint256), txdata: 0x338b5dea010101010101010101010101100804020101010101040101010100010101010101, value: 0x0
Caller: [ATTACKER], function: depositToken(address,uint256), txdata: 0x338b5deabebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: ERC20Vault
Function name: claim(address)
PC address: 3262
Estimated Gas Usage: 1758 - 2844
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/11705.sol:353

this.balanceOf(token, msg.sender)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: depositToken(address,uint256), txdata: 0x338b5dea010101010101010101010101010101010101010101010104100110010101010101, value: 0x0
Caller: [SOMEGUY], function: claim(address), txdata: 0x1e83409a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: ERC20Vault
Function name: payees(uint256)
PC address: 3493
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/11705.sol:134

address[] public payees

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: depositToken(address,uint256), txdata: 0x338b5dea000000000000000000000000010101010101010101010104100110010101010101, value: 0x0
Caller: [SOMEGUY], function: payees(uint256), txdata: 0x63037b0c, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: SplitErc20Payment
Function name: depositToken(address,uint256)
PC address: 3530
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/11705.sol:86

tokens[token][msg.sender] += value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: depositToken(address,uint256), txdata: 0x338b5deabebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: SplitErc20Payment
Function name: depositToken(address,uint256)
PC address: 3607
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/11705.sol:87

totalDeposited[token] += value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: depositToken(address,uint256), txdata: 0x338b5deabebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: ERC20Vault
Function name: partialClaim(address,uint256)
PC address: 4546
Estimated Gas Usage: 2027 - 3113
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/11705.sol:361

this.balanceOf(token, msg.sender)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: depositToken(address,uint256), txdata: 0x338b5dea010101010101010101010101010101010101010101010104100110010101010101, value: 0x0
Caller: [SOMEGUY], function: partialClaim(address,uint256), txdata: 0xcef4be3c, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: SplitErc20Payment
Function name: depositToken(address,uint256)
PC address: 4774
Estimated Gas Usage: 27224 - 145173
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/11705.sol:206

shares[token][_payee] += _shares

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: depositToken(address,uint256), txdata: 0x338b5dea000000000000000000000000010101010101010101010101010101010101010180, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: SplitErc20Payment
Function name: depositToken(address,uint256)
PC address: 4780
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/11705.sol:206

shares[token][_payee] += _shares

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: depositToken(address,uint256), txdata: 0x338b5dea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: SplitErc20Payment
Function name: depositToken(address,uint256)
PC address: 4857
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/11705.sol:207

totalShares[token] += _shares

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: depositToken(address,uint256), txdata: 0x338b5dea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: ERC20Vault
Function name: depositToken(address,uint256)
PC address: 5170
Estimated Gas Usage: 1250 - 1911
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/11705.sol:112

ERC20(token).transferFrom(msg.sender, this, amount)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: depositToken(address,uint256), txdata: 0x338b5dea010101010101010101010101100804020101010101040101010100010101010101, value: 0x0
Caller: [ATTACKER], function: depositToken(address,uint256), txdata: 0x338b5deabebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ERC20Vault
Function name: deposit()
PC address: 6494
Estimated Gas Usage: 25570 - 108767
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/11705.sol:86

tokens[token][msg.sender] += value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: deposit(), txdata: 0xd0e30db0, value: 0x1
Caller: [CREATOR], function: deposit(), txdata: 0xd0e30db0, value: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20Vault
Function name: depositToken(address,uint256)
PC address: 6500
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/11705.sol:86

tokens[token][msg.sender] += value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: depositToken(address,uint256), txdata: 0x338b5deabebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ERC20Vault
Function name: depositToken(address,uint256)
PC address: 6571
Estimated Gas Usage: 27246 - 145195
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/11705.sol:87

totalDeposited[token] += value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: depositToken(address,uint256), txdata: 0x338b5dea000000000000000000000000028020100480400404108004020202100202011040, value: 0x0
Caller: [SOMEGUY], function: depositToken(address,uint256), txdata: 0x338b5dea0000000000000000000000000280201004804004041080040202021002020110c0, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20Vault
Function name: depositToken(address,uint256)
PC address: 6577
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/11705.sol:87

totalDeposited[token] += value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: depositToken(address,uint256), txdata: 0x338b5deabebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ERC20Vault
Function name: deposit()
PC address: 7387
Estimated Gas Usage: 36148 - 159770
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/11705.sol:198

totalShares[token] += _shares

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: deposit(), txdata: 0xd0e30db0, value: 0x1
Caller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ERC20Vault
Function name: depositToken(address,uint256)
PC address: 7744
Estimated Gas Usage: 27246 - 145195
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/11705.sol:206

shares[token][_payee] += _shares

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: depositToken(address,uint256), txdata: 0x338b5dea000000000000000000000000010101010101010101010101010101010101010180, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20Vault
Function name: depositToken(address,uint256)
PC address: 7750
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/11705.sol:206

shares[token][_payee] += _shares

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: depositToken(address,uint256), txdata: 0x338b5dea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ERC20Vault
Function name: deposit()
PC address: 7821
Estimated Gas Usage: 25570 - 108767
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/11705.sol:207

totalShares[token] += _shares

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: deposit(), txdata: 0xd0e30db0, value: 0x1
Caller: [CREATOR], function: deposit(), txdata: 0xd0e30db0, value: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20Vault
Function name: depositToken(address,uint256)
PC address: 7827
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/11705.sol:207

totalShares[token] += _shares

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: depositToken(address,uint256), txdata: 0x338b5dea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

