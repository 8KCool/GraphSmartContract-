solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AuctusTokenSale
Function name: setEndSaleTime(uint256)
PC address: 2954
Estimated Gas Usage: 6241 - 26666
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/21241.sol:112

require(now < endTime)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setEndSaleTime(uint256), txdata: 0x6f68fffd, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AuctusTokenSale
Function name: finish()
PC address: 3793
Estimated Gas Usage: 7528 - 110936
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/21241.sol:88

now > endTime || remainingTokens == 0

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: finish(), txdata: 0xd56b2889, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AuctusTokenSale
Function name: finish()
PC address: 3808
Estimated Gas Usage: 7117 - 110525
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/21241.sol:88

require(weiRaised >= softCap && (now > endTime || remainingTokens == 0))

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: finish(), txdata: 0xd56b2889, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: AuctusTokenSale
Function name: finish()
PC address: 3842
Estimated Gas Usage: 7528 - 110936
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/21241.sol:158

address(this).balance * 40

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: finish(), txdata: 0xd56b2889, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: AuctusTokenSale
Function name: finish()
PC address: 4033
Estimated Gas Usage: 4373 - 39170
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/21241.sol:162

address(0x0285d35508e1A1f833142EB5211adb858Bd3323A).call.value(vestedEthers)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38bbebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: finish(), txdata: 0xd56b2889, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AuctusTokenSale
Function name: finish()
PC address: 4033
Estimated Gas Usage: 7528 - 110936
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: /tmp/21241.sol:162

address(0x0285d35508e1A1f833142EB5211adb858Bd3323A).call.value(vestedEthers)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: finish(), txdata: 0xd56b2889, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: AuctusTokenSale
Function name: finish()
PC address: 4044
Estimated Gas Usage: 5101 - 73898
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/21241.sol:162

assert(address(0x0285d35508e1A1f833142EB5211adb858Bd3323A).call.value(vestedEthers)())

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38bbebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: finish(), txdata: 0xd56b2889, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: AuctusTokenSale
Function name: finish()
PC address: 4184
Estimated Gas Usage: 6356 - 75764
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/21241.sol:165

token.setTokenSaleFinished()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38bbebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: finish(), txdata: 0xd56b2889, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AuctusTokenSale
Function name: finish()
PC address: 4184
Estimated Gas Usage: 7528 - 110936
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: /tmp/21241.sol:165

token.setTokenSaleFinished()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38bbebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: finish(), txdata: 0xd56b2889, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AuctusTokenSale
Function name: setSoftCap(uint256)
PC address: 4506
Estimated Gas Usage: 6483 - 26908
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/21241.sol:107

require(now < startTime)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: setSoftCap(uint256), txdata: 0xd5cf5c72, value: 0x0

