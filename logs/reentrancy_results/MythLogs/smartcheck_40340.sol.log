solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Etheropt
Function name: marketMaker(string)
PC address: 1475
Estimated Gas Usage: 41937 - 189215
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/40340.sol:108

function marketMaker(string server) {
    if (msg.value>0) throw;
    if (marketMakerIDs[msg.sender]>0) {
      marketMakers[marketMakerIDs[msg.sender]].server = server;
    } else {
      int funds = getFunds(marketMakers[i].user, false);
      uint marketMakerID = 0;
      if (numMarketMakers<6) {
        marketMakerID = ++numMarketMakers;
      } else {
        for (uint i=2; i<=numMarketMakers; i++) {
          if (getFunds(marketMakers[i].user, false)<=funds && (marketMakerID==0 || getFunds(marketMakers[i].user, false)<getFunds(marketMakers[marketMakerID].user, false))) {
            marketMakerID = i;
          }
        }
      }
      if (marketMakerID>0) {
        marketMakerIDs[marketMakers[marketMakerID].user] = 0;
        marketMakers[marketMakerID].user = msg.sender;
        marketMakers[marketMakerID].server = server;
        marketMakerIDs[msg.sender] = marketMakerID;
        NewMarketMaker(msg.sender, server);
      } else {
        throw;
      }
    }
  }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: marketMaker(string), txdata: 0x502414e4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Etheropt
Function name: orderMatchTest(uint256,uint256,int256,uint256,uint256,address,address,uint256,int256)
PC address: 9831
Estimated Gas Usage: 3635 - 5572
A control flow decision is made based on a predictable variable.
The block.number environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/40340.sol:232

block.number<=blockExpires && ((size>0 && matchSize<0 && orderFills[sha3(optionID, price, size, orderID, blockExpires)]-matchSize<=size) || (size<0 && matchSize>0 && orderFills[sha3(optionID, price, size, orderID, blockExpires)]-matchSize>=size))

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: orderMatchTest(uint256,uint256,int256,uint256,uint256,address,address,uint256,int256), txdata: 0xc6cb7a9600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bf7fff7f7f7f7f7f7f7fff7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f80000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000200020800000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: Etheropt
Function name: orderMatchTest(uint256,uint256,int256,uint256,uint256,address,address,uint256,int256)
PC address: 9939
Estimated Gas Usage: 3584 - 5521
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: /tmp/40340.sol:232

orderFills[sha3(optionID, price, size, orderID, blockExpires)]-matchSize

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: orderMatchTest(uint256,uint256,int256,uint256,uint256,address,address,uint256,int256), txdata: 0xc6cb7a96000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: Etheropt
Function name: orderMatchTest(uint256,uint256,int256,uint256,uint256,address,address,uint256,int256)
PC address: 10055
Estimated Gas Usage: 3635 - 5572
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: /tmp/40340.sol:232

orderFills[sha3(optionID, price, size, orderID, blockExpires)]-matchSize

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: orderMatchTest(uint256,uint256,int256,uint256,uint256,address,address,uint256,int256), txdata: 0xc6cb7a96000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009a000100000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000020400000200020800000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Etheropt
Function name: orderMatchTest(uint256,uint256,int256,uint256,uint256,address,address,uint256,int256)
PC address: 10066
Estimated Gas Usage: 1092 - 1468
A control flow decision is made based on a predictable variable.
The block.number environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/40340.sol:232

block.number<=blockExpires && ((size>0 && matchSize<0 && orderFills[sha3(optionID, price, size, orderID, blockExpires)]-matchSize<=size) || (size<0 && matchSize>0 && orderFills[sha3(optionID, price, size, orderID, blockExpires)]-matchSize>=size)) && getFunds(addr, false)+getMaxLossAfterTrade(addr, optionID, -matchSize, matchSize * int(price))>0

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: orderMatchTest(uint256,uint256,int256,uint256,uint256,address,address,uint256,int256), txdata: 0xc6cb7a96, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Etheropt
Function name: orderMatchTest(uint256,uint256,int256,uint256,uint256,address,address,uint256,int256)
PC address: 10106
Estimated Gas Usage: 1092 - 1468
A control flow decision is made based on a predictable variable.
The block.number environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/40340.sol:232

block.number<=blockExpires && ((size>0 && matchSize<0 && orderFills[sha3(optionID, price, size, orderID, blockExpires)]-matchSize<=size) || (size<0 && matchSize>0 && orderFills[sha3(optionID, price, size, orderID, blockExpires)]-matchSize>=size)) && getFunds(addr, false)+getMaxLossAfterTrade(addr, optionID, -matchSize, matchSize * int(price))>0 && getFunds(sender, false)+int(value)+getMaxLossAfterTrade(sender, optionID, matchSize, -matchSize * int(price))>0

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: orderMatchTest(uint256,uint256,int256,uint256,uint256,address,address,uint256,int256), txdata: 0xc6cb7a96, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Etheropt
Function name: orderMatchTest(uint256,uint256,int256,uint256,uint256,address,address,uint256,int256)
PC address: 10147
Estimated Gas Usage: 1092 - 1468
A control flow decision is made based on a predictable variable.
The block.number environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/40340.sol:232

if (block.number<=blockExpires && ((size>0 && matchSize<0 && orderFills[sha3(optionID, price, size, orderID, blockExpires)]-matchSize<=size) || (size<0 && matchSize>0 && orderFills[sha3(optionID, price, size, orderID, blockExpires)]-matchSize>=size)) && getFunds(addr, false)+getMaxLossAfterTrade(addr, optionID, -matchSize, matchSize * int(price))>0 && getFunds(sender, false)+int(value)+getMaxLossAfterTrade(sender, optionID, matchSize, -matchSize * int(price))>0) {
      return true;
    }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: orderMatchTest(uint256,uint256,int256,uint256,uint256,address,address,uint256,int256), txdata: 0xc6cb7a96, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: Etheropt
Function name: getMoneyness(int256,uint256,uint256)
PC address: 12464
Estimated Gas Usage: 1058 - 1434
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: /tmp/40340.sol:219

-strike

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: getMoneyness(int256,uint256,uint256), txdata: 0xec0b4153bffffffffffffffffffffffffffffffffffffffffff8804080804080402011423fffffffffffffffffffffffffffffffffffffffffc77fbf7f7fbf7fbfdfed0001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: Etheropt
Function name: getMoneyness(int256,uint256,uint256)
PC address: 12477
Estimated Gas Usage: 1058 - 1434
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: /tmp/40340.sol:220

-strike

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: getMoneyness(int256,uint256,uint256), txdata: 0xec0b4153bffffffffffffffffffffffffffffffffffffffffff8804080804080402011423fffffffffffffffffffffffffffffffffffffffffc77fbf7f7fbf7fbfdfed0001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: Etheropt
Function name: getMoneyness(int256,uint256,uint256)
PC address: 12489
Estimated Gas Usage: 1058 - 1434
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: /tmp/40340.sol:221

-strike

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: getMoneyness(int256,uint256,uint256), txdata: 0xec0b4153bffffffffffffffffffffffffffffffffffffffffff8804080804080402011423fffffffffffffffffffffffffffffffffffffffffc77fbf7f7fbf7fbfdfed0001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: Low
Contract: Etheropt
Function name: marketMaker(string)
PC address: 12787
Estimated Gas Usage: 41937 - 189215
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: marketMaker(string), txdata: 0x502414e480, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: Etheropt
Function name: marketMaker(string)
PC address: 12863
Estimated Gas Usage: 35351 - 160917
Potential denial-of-service if block gas limit is reached.
A storage modification is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: marketMaker(string), txdata: 0x502414e480, value: 0x0

