solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Storage
Function name: set(address,uint256)
PC address: 807
Estimated Gas Usage: 778 - 1393
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/28974.sol:19

assert (adminStatus[msg.sender]==true)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: update(address,uint256), txdata: 0xa2d83b5e000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: set(address,uint256), txdata: 0x3825d828, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Payee
Function name: fallback
PC address: 828
Estimated Gas Usage: 536 - 961
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/28974.sol:118

assert(changeable==true)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: halt(), txdata: 0x5ed7ca5b, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Payee
Function name: pay(address,uint256)
PC address: 834
Estimated Gas Usage: 7005 - 111565
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/28974.sol:119

price*count

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: pay(address,uint256), txdata: 0xc4076876010101010101010101010101010101010101010101010101010101010101010180, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Payee
Function name: fallback
PC address: 844
Estimated Gas Usage: 975 - 1400
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/28974.sol:119

assert(msg.value >= price*count)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: admin(address), txdata: 0x63a846f8, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Payee
Function name: pay(address,uint256)
PC address: 907
Estimated Gas Usage: 7005 - 111565
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/28974.sol:120

price*count

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: pay(address,uint256), txdata: 0xc4076876010101010101010101010101010101010101010101010101010101010101010180, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: Payee
Function name: pay(address,uint256)
PC address: 923
Estimated Gas Usage: 2194 - 3135
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/28974.sol:120

founder.call.value(price*count)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: pay(address,uint256), txdata: 0xc4076876, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Payee
Function name: pay(address,uint256)
PC address: 962
Estimated Gas Usage: 7005 - 111565
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/28974.sol:120

price*count

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: pay(address,uint256), txdata: 0xc4076876010101010101010101010101010101010101010101010101010101010101010180, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Payee
Function name: pay(address,uint256)
PC address: 980
Estimated Gas Usage: 3383 - 38510
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/28974.sol:120

msg.sender.call.value(msg.value-price*count)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: pay(address,uint256), txdata: 0xc4076876, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Payee
Function name: pay(address,uint256)
PC address: 980
Estimated Gas Usage: 7005 - 111565
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: /tmp/28974.sol:120

msg.sender.call.value(msg.value-price*count)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: pay(address,uint256), txdata: 0xc4076876, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: Payee
Function name: fallback
PC address: 980
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/28974.sol:120

msg.sender.call.value(msg.value-price*count)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0xaa87bee538000

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: Payee
Function name: pay(address,uint256)
PC address: 1196
Estimated Gas Usage: 5425 - 75353
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/28974.sol:123

s.update(_addr,count)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: pay(address,uint256), txdata: 0xc4076876, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: Payee
Function name: fallback
PC address: 1196
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/28974.sol:123

s.update(_addr,count)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0xaa87bee538000

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Payee
Function name: setStorageAddress(address)
PC address: 1489
Estimated Gas Usage: 795 - 1410
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/28974.sol:78

assert (adminStatus[msg.sender]==true)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: setStorageAddress(address), txdata: 0x59b910d6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Storage
Function name: update(address,uint256)
PC address: 1943
Estimated Gas Usage: 932 - 1547
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/28974.sol:19

assert (adminStatus[msg.sender]==true)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: update(address,uint256), txdata: 0xa2d83b5e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Storage
Function name: update(address,uint256)
PC address: 2113
Estimated Gas Usage: 2424 - 3749
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/28974.sol:31

assert(slot[userAddress]+data>slot[userAddress])

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: update(address,uint256), txdata: 0xa2d83b5e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Payee
Function name: setPrice(uint256)
PC address: 2368
Estimated Gas Usage: 877 - 1492
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/28974.sol:78

assert (adminStatus[msg.sender]==true)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: setPrice(uint256), txdata: 0x91b7f5ed, value: 0x0


Exception ignored in: <object repr() failed>
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/z3/z3.py", line 304, in __del__
    if self.ctx.ref() is not None:
AttributeError: 'BoolRef' object has no attribute 'ctx'
