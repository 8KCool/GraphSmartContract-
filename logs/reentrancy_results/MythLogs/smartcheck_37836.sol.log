solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Exception State ====
SWC ID: 110
Severity: Low
Contract: StandardToken
Function name: approve(address,uint256)
PC address: 733
Estimated Gas Usage: 268 - 363
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:81

assert(msg.data.length == numwords * 32 + 4)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd010101010101010101010101010101010101010101800102020101010101010101010101010101010101010101010101010101010180010202010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: StandardToken
Function name: transferFrom(address,address,uint256)
PC address: 1008
Estimated Gas Usage: 345 - 440
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:81

assert(msg.data.length == numwords * 32 + 4)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd010101010101010101010101010101010101010101800201010101010101010101010101010101010101010101010101010101010180020101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: StandardToken
Function name: transferFrom(address,address,uint256)
PC address: 1083
Estimated Gas Usage: 867 - 1152
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:107

assert(_balances[_from] >= _value)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: StandardToken
Function name: transfer(address,uint256)
PC address: 1972
Estimated Gas Usage: 356 - 451
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:81

assert(msg.data.length == numwords * 32 + 4)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000010101010101010101800100010100010101010100000000000000000000000001010101010101010180010001010001010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: StandardToken
Function name: transfer(address,uint256)
PC address: 2047
Estimated Gas Usage: 877 - 1162
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:96

assert(_balances[msg.sender] >= _value)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000000000000000000000000000000000000000000101200000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HUNT
Function name: approve(address,uint256)
PC address: 3439
Estimated Gas Usage: 290 - 385
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:81

assert(msg.data.length == numwords * 32 + 4)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd010101010101010101010101010102010201010102010101010101010101010101010101010101010101010101010201020101010201010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HUNT
Function name: setCurs(uint8)
PC address: 3781
Estimated Gas Usage: 749 - 1174
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:40

assert (msg.sender == owner)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000020401020201010101080201010101010101010100000000000000000000000002040102020101010108020101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: setCurs(uint8), txdata: 0x0c7eca6e, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HUNT
Function name: transferFrom(address,address,uint256)
PC address: 3832
Estimated Gas Usage: 20978 - 83981
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/37836.sol:276

endDate + 7 days

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000010101010101010101010102400401000100010400000000000000000000000001010101010101010101010240040100010001040000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HUNT
Function name: transferFrom(address,address,uint256)
PC address: 3847
Estimated Gas Usage: 20978 - 83981
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/37836.sol:276

require((time() > endDate + 7 days ))

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd010101010101010101010101010101010101010101010101200101010101010101010101010101010101010101010101010101010101010120010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HUNT
Function name: buyPrice()
PC address: 3889
Estimated Gas Usage: 3638 - 4014
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/37836.sol:175

if (at < startDate) {
            return 0;
        } else if (at < (startDate + 2 days)) {
            return div(curs,100);
        } else if (at < (startDate + 5 days)) {
            return div(curs,120);
        } else if (at < (startDate + 10 days)) {
            return div(curs,130);
        } else if (at < (startDate + 15 days)) {
            return div(curs,140);
        } else if (at <= endDate) {
            return div(curs,150);
        } else {
            return 0;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: buyPrice(), txdata: 0x8620410b, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HUNT
Function name: buyPrice()
PC address: 3906
Estimated Gas Usage: 3638 - 4014
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/37836.sol:177

startDate + 2 days

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: buyPrice(), txdata: 0x8620410b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HUNT
Function name: buyPrice()
PC address: 3913
Estimated Gas Usage: 3638 - 4014
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/37836.sol:177

if (at < (startDate + 2 days)) {
            return div(curs,100);
        } else if (at < (startDate + 5 days)) {
            return div(curs,120);
        } else if (at < (startDate + 10 days)) {
            return div(curs,130);
        } else if (at < (startDate + 15 days)) {
            return div(curs,140);
        } else if (at <= endDate) {
            return div(curs,150);
        } else {
            return 0;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: buyPrice(), txdata: 0x8620410b, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HUNT
Function name: buyPrice()
PC address: 3941
Estimated Gas Usage: 3638 - 4014
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/37836.sol:179

startDate + 5 days

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: buyPrice(), txdata: 0x8620410b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HUNT
Function name: buyPrice()
PC address: 3948
Estimated Gas Usage: 3638 - 4014
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/37836.sol:179

if (at < (startDate + 5 days)) {
            return div(curs,120);
        } else if (at < (startDate + 10 days)) {
            return div(curs,130);
        } else if (at < (startDate + 15 days)) {
            return div(curs,140);
        } else if (at <= endDate) {
            return div(curs,150);
        } else {
            return 0;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: buyPrice(), txdata: 0x8620410b, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HUNT
Function name: buyPrice()
PC address: 3976
Estimated Gas Usage: 3638 - 4014
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/37836.sol:181

startDate + 10 days

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: buyPrice(), txdata: 0x8620410b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HUNT
Function name: buyPrice()
PC address: 3983
Estimated Gas Usage: 3638 - 4014
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/37836.sol:181

if (at < (startDate + 10 days)) {
            return div(curs,130);
        } else if (at < (startDate + 15 days)) {
            return div(curs,140);
        } else if (at <= endDate) {
            return div(curs,150);
        } else {
            return 0;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: buyPrice(), txdata: 0x8620410b, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HUNT
Function name: buyPrice()
PC address: 4011
Estimated Gas Usage: 3638 - 4014
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/37836.sol:183

startDate + 15 days

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: buyPrice(), txdata: 0x8620410b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HUNT
Function name: buyPrice()
PC address: 4018
Estimated Gas Usage: 3638 - 4014
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/37836.sol:183

if (at < (startDate + 15 days)) {
            return div(curs,140);
        } else if (at <= endDate) {
            return div(curs,150);
        } else {
            return 0;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: buyPrice(), txdata: 0x8620410b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HUNT
Function name: buyPrice()
PC address: 4049
Estimated Gas Usage: 3638 - 4014
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/37836.sol:185

if (at <= endDate) {
            return div(curs,150);
        } else {
            return 0;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: buyPrice(), txdata: 0x8620410b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HUNT
Function name: burn(uint256)
PC address: 4167
Estimated Gas Usage: 853 - 1278
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:40

assert (msg.sender == owner)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000010101010102010102040101010102020101010100000000000000000000000001010101010201010204010101010202010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: burn(uint256), txdata: 0x42966c68, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HUNT
Function name: mint(uint256)
PC address: 5185
Estimated Gas Usage: 1007 - 1432
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:40

assert (msg.sender == owner)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd010101010101010101010101010101020101010101010101010102010101010101010101010101010101010101010102010101010101010101010201010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: mint(uint256), txdata: 0xa0712d68, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HUNT
Function name: mint(uint256)
PC address: 5194
Estimated Gas Usage: 15578 - 57910
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/37836.sol:282

endDate + 7 days

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: mint(uint256), txdata: 0xa0712d6801, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HUNT
Function name: mint(uint256)
PC address: 5209
Estimated Gas Usage: 15578 - 57910
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/37836.sol:282

require((time() > endDate + 7 days ))

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: mint(uint256), txdata: 0xa0712d6801, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HUNT
Function name: transfer(address,uint256)
PC address: 5594
Estimated Gas Usage: 14751 - 56614
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/37836.sol:266

endDate + 7 days

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HUNT
Function name: transfer(address,uint256)
PC address: 5609
Estimated Gas Usage: 14751 - 56614
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/37836.sol:266

require((time() > endDate + 7 days ))

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000deadbeefdeadbeefdead0101de010104010201000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HUNT
Function name: collect()
PC address: 5899
Estimated Gas Usage: 1105 - 1530
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:40

assert (msg.sender == owner)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000010101010102010101802001010101010401010100000000000000000000000001010101010201010180200101010101040101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: collect(), txdata: 0xe5225381, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: HUNT
Function name: collect()
PC address: 6012
Estimated Gas Usage: 2034 - 3070
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/37836.sol:304

addrcnt.call.value(this.balance)(0)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: collect(), txdata: 0xe5225381, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HUNT
Function name: transferOwnership(address)
PC address: 6252
Estimated Gas Usage: 1211 - 1636
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:40

assert (msg.sender == owner)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd010101010101010101010101010101010101010102010101010101010101010101010101010101010101010101010101010101010201010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HUNT
Function name: mint(uint256)
PC address: 6347
Estimated Gas Usage: 2501 - 3446
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:15

assert((z = x + y) >= x)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: mint(uint256), txdata: 0xa0712d68c1, value: 0x0
Caller: [CREATOR], function: mint(uint256), txdata: 0xa0712d6840, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HUNT
Function name: burn(uint256)
PC address: 6372
Estimated Gas Usage: 2347 - 3292
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:11

assert((z = x - y) <= x)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: burn(uint256), txdata: 0x42966c68eb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HUNT
Function name: transferFrom(address,address,uint256)
PC address: 6451
Estimated Gas Usage: 929 - 1024
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:81

assert(msg.data.length == numwords * 32 + 4)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HUNT
Function name: transferFrom(address,address,uint256)
PC address: 6526
Estimated Gas Usage: 1451 - 1736
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:107

assert(_balances[_from] >= _value)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HUNT
Function name: transferFrom(address,address,uint256)
PC address: 6662
Estimated Gas Usage: 2062 - 2727
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:108

assert(_approvals[_from][msg.sender] >= _value)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: mint(uint256), txdata: 0xa0712d6880, value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd010101010101010101010101affeaffeaffeaffeaffeaffeaffeaffeaffeaffe01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HUNT
Function name: transfer(address,uint256)
PC address: 7342
Estimated Gas Usage: 1179 - 1274
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:81

assert(msg.data.length == numwords * 32 + 4)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd010101010101010101010101020101010101010101010101010101010101010101010101010101010101010102010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HUNT
Function name: transfer(address,uint256)
PC address: 7417
Estimated Gas Usage: 1700 - 1985
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/37836.sol:96

assert(_balances[msg.sender] >= _value)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

