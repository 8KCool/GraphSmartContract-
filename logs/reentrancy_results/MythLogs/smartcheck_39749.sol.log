solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: EtherollCrowdfund
Function name: constructor
PC address: 10
Estimated Gas Usage: 59043 - 286709
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39749.sol:77

now + 10080 * 1 minutes

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EtherollCrowdfund
Function name: fallback
PC address: 284
Estimated Gas Usage: 18045 - 94279
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/39749.sol:133

if(now > deadline) crowdsaleClosed = true

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EtherollCrowdfund
Function name: fallback
PC address: 362
Estimated Gas Usage: 17582 - 93816
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/39749.sol:142

if(now < weekTwoPriceRiseBegin) {


            if(tokenReward.transfer(msg.sender, ((msg.value*price)/price)*2)) {
                LogFundTransfer(msg.sender, msg.value, true);
            } else {
                throw;
            }

        }else{

            if(tokenReward.transfer(msg.sender, (msg.value*price)/price)) {
                LogFundTransfer(msg.sender, msg.value, true);
            } else {
                throw;
            }

        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x1

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: EtherollCrowdfund
Function name: constructor
PC address: 397
Estimated Gas Usage: 59043 - 286709
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39749.sol:122

_fundingGoalInEthers * 1 ether

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: EtherollCrowdfund
Function name: constructor
PC address: 407
Estimated Gas Usage: 59043 - 286709
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39749.sol:123

_durationInMinutes * 1 minutes

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: EtherollCrowdfund
Function name: constructor
PC address: 409
Estimated Gas Usage: 59043 - 286709
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39749.sol:123

now + _durationInMinutes * 1 minutes

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: EtherollCrowdfund
Function name: fallback
PC address: 435
Estimated Gas Usage: 18045 - 94279
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39749.sol:145

msg.value*price

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x02088004, value: 0x734aca5f6226f0ada6175f343cc4d4d9dfb8b60d6e93f84291f

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: EtherollCrowdfund
Function name: fallback
PC address: 582
Estimated Gas Usage: 3990 - 5216
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/39749.sol:145

tokenReward.transfer(msg.sender, ((msg.value*price)/price)*2)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x04010201, value: 0x1

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: EtherollCrowdfund
Function name: fallback
PC address: 801
Estimated Gas Usage: 18045 - 94279
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39749.sol:153

msg.value*price

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x02088004, value: 0x734aca5f6226f0ada6175f343cc4d4d9dfb8b60d6e93f84291f

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: EtherollCrowdfund
Function name: fallback
PC address: 947
Estimated Gas Usage: 3983 - 5209
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/39749.sol:153

tokenReward.transfer(msg.sender, (msg.value*price)/price)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x01000108, value: 0x1

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: EtherollCrowdfund
Function name: fallback
PC address: 1108
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/39749.sol:162

amountRaised = safeAdd(amountRaised, msg.value)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x1

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: EtherollCrowdfund
Function name: fallback
PC address: 1248
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/39749.sol:165

balanceOf[msg.sender] = safeAdd(balanceOf[msg.sender], msg.value)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EtherollCrowdfund
Function name: ownerBurnUnsoldTokens()
PC address: 2446
Estimated Gas Usage: 3011 - 38047
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/39749.sol:64

if (now < deadline) throw

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: ownerBurnUnsoldTokens(), txdata: 0x0860a902, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: EtherollCrowdfund
Function name: ownerBurnUnsoldTokens()
PC address: 2588
Estimated Gas Usage: 2271 - 3307
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/39749.sol:251

tokenReward.priviledgedAddressBurnUnsoldCoins()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x01010101, value: 0x1
Caller: [CREATOR], function: ownerBurnUnsoldTokens(), txdata: 0x0860a902, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EtherollCrowdfund
Function name: safeWithdraw()
PC address: 2707
Estimated Gas Usage: 35916 - 189009
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/39749.sol:64

if (now < deadline) throw

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: safeWithdraw(), txdata: 0x7fd42617, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: EtherollCrowdfund
Function name: safeWithdraw()
PC address: 3054
Estimated Gas Usage: 35916 - 189009
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/39749.sol:191

this.balance*80

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: safeWithdraw(), txdata: 0x7fd42617, value: 0x0

==== Unchecked Call Return Value ====
SWC ID: 104
Severity: Low
Contract: EtherollCrowdfund
Function name: safeWithdraw()
PC address: 3154
Estimated Gas Usage: 28801 - 146164
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: /tmp/39749.sol:194

bankRollBeneficiary.send(bankrollBeneficiaryAmount)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: safeWithdraw(), txdata: 0x7fd42617, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: EtherollCrowdfund
Function name: safeWithdraw()
PC address: 3386
Estimated Gas Usage: 35916 - 189009
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: /tmp/39749.sol:203

etherollBeneficiary.send(etherollBeneficiaryAmount)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: safeWithdraw(), txdata: 0x7fd42617, value: 0x0

