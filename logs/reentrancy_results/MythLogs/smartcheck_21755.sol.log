solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: COIN_BOX
Function name: fallback
PC address: 556
Estimated Gas Usage: 8334 - 63705
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/21755.sol:44

acc.balance += msg.value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x01010101, value: 0x1

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: COIN_BOX
Function name: Put(uint256)
PC address: 571
Estimated Gas Usage: 13368 - 88739
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/21755.sol:45

now+_lockTime

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: Put(uint256), txdata: 0x65f3c31a10, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: COIN_BOX
Function name: Put(uint256)
PC address: 577
Estimated Gas Usage: 13368 - 88739
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/21755.sol:45

if(now+_lockTime>acc.unlockTime)acc.unlockTime=now+_lockTime

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: Put(uint256), txdata: 0x65f3c31a, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: COIN_BOX
Function name: Put(uint256)
PC address: 580
Estimated Gas Usage: 13368 - 88739
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/21755.sol:45

now+_lockTime

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: Put(uint256), txdata: 0x65f3c31a10, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: COIN_BOX
Function name: fallback
PC address: 846
Estimated Gas Usage: 12615 - 53986
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/21755.sol:46

LogFile.AddMessage(msg.sender,msg.value,"Put")

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: COIN_BOX
Function name: fallback
PC address: 846
Estimated Gas Usage: 12615 - 53986
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/21755.sol:46

LogFile.AddMessage(msg.sender,msg.value,"Put")

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: SetLogFile(address), txdata: 0x303b9379bebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: COIN_BOX
Function name: Collect(uint256)
PC address: 1077
Estimated Gas Usage: 10325 - 99882
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/21755.sol:51

if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime) {
            if(msg.sender.call.value(_am)())  {
                acc.balance-=_am;
                LogFile.AddMessage(msg.sender,_am,"Collect");
            }
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: COIN_BOX
Function name: Collect(uint256)
PC address: 1117
Estimated Gas Usage: 2034 - 2505
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/21755.sol:52

msg.sender.call.value(_am)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0
Caller: [ATTACKER], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0

==== Unchecked Call Return Value ====
SWC ID: 104
Severity: Low
Contract: COIN_BOX
Function name: Collect(uint256)
PC address: 1117
Estimated Gas Usage: 2774 - 37245
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: /tmp/21755.sol:52

msg.sender.call.value(_am)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0
Caller: [SOMEGUY], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: COIN_BOX
Function name: Collect(uint256)
PC address: 1117
Estimated Gas Usage: 2034 - 2505
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: /tmp/21755.sol:52

msg.sender.call.value(_am)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0
Caller: [ATTACKER], function: Collect(uint256), txdata: 0x3fe4382201, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: COIN_BOX
Function name: Collect(uint256)
PC address: 1143
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/21755.sol:53

acc.balance-=_am

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: COIN_BOX
Function name: Collect(uint256)
PC address: 1401
Estimated Gas Usage: 9579 - 65136
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/21755.sol:54

LogFile.AddMessage(msg.sender,_am,"Collect")

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: COIN_BOX
Function name: Collect(uint256)
PC address: 1401
Estimated Gas Usage: 10325 - 99882
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: /tmp/21755.sol:54

LogFile.AddMessage(msg.sender,_am,"Collect")

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: COIN_BOX
Function name: Collect(uint256)
PC address: 1401
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/21755.sol:54

LogFile.AddMessage(msg.sender,_am,"Collect")

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0

