solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: MyDice
Function name: playerWithdrawPendingTransactions()
PC address: 6214
Estimated Gas Usage: 6715 - 27706
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/35649.sol:207

msg.sender.call.value(withdrawAmount)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: playerWithdrawPendingTransactions(), txdata: 0xa5f4af33, value: 0x0

==== Unchecked Call Return Value ====
SWC ID: 104
Severity: Low
Contract: MyDice
Function name: playerWithdrawPendingTransactions()
PC address: 6214
Estimated Gas Usage: 12634 - 88096
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: /tmp/35649.sol:207

msg.sender.call.value(withdrawAmount)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: playerWithdrawPendingTransactions(), txdata: 0xa5f4af33, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: MyDice
Function name: playerWithdrawPendingTransactions()
PC address: 6299
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/35649.sol:212

playerPendingWithdrawals[msg.sender] = withdrawAmount

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: playerWithdrawPendingTransactions(), txdata: 0xa5f4af33, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: MyDice
Function name: ownerAddBankroll()
PC address: 6749
Estimated Gas Usage: 12169 - 52594
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/35649.sol:224

contractBalance*maxProfitAsPercentOfHouse

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: ownerAddBankroll(), txdata: 0x31b29629, value: 0x346dc5d63886594af4f0d844d013a92a305532617c1bda5119ce075f6fd22

