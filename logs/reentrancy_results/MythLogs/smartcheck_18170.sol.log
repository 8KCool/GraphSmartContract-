solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: A2ACrowdsalePartner
Function name: constructor
PC address: 289
Estimated Gas Usage: 16886 - 78535
Potential denial-of-service if block gas limit is reached.
A storage modification is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: A2ACrowdsale
Function name: constructor
PC address: 577
Estimated Gas Usage: 63369 - 306008
Potential denial-of-service if block gas limit is reached.
A storage modification is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: A2ACrowdsalePartner
Function name: withdrawToFounders(uint256)
PC address: 2629
Estimated Gas Usage: 4184 - 73922
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: /tmp/18170.sol:599

foundersAddresses[i].send(amount_to_withdraw)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: withdrawToFounders(uint256), txdata: 0xe37d4fed, value: 0x0

==== Unchecked Call Return Value ====
SWC ID: 104
Severity: Low
Contract: A2ACrowdsalePartner
Function name: withdrawToFounders(uint256)
PC address: 2629
Estimated Gas Usage: 4184 - 73922
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: /tmp/18170.sol:599

foundersAddresses[i].send(amount_to_withdraw)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38bbebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawToFounders(uint256), txdata: 0xe37d4fed, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: A2ACrowdsale
Function name: mintETHRewards(address,uint256)
PC address: 5626
Estimated Gas Usage: 1753 - 2694
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/18170.sol:385

_contract.call.value(_amount)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38bbebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: mintETHRewards(address,uint256), txdata: 0x18c9ef97, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: A2ACrowdsale
Function name: mintETHRewards(address,uint256)
PC address: 5656
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/18170.sol:386

wingsETHRewards -= _amount

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: mintETHRewards(address,uint256), txdata: 0x18c9ef97000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: A2ACrowdsale
Function name: isActive()
PC address: 5775
Estimated Gas Usage: 2520 - 3226
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/18170.sol:430

started &&


                        totalCollected < hardCap &&


                        block.timestamp >= startTimestamp &&
                        block.timestamp < endTimestamp

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: start(uint256,uint256,address), txdata: 0xa51fe113bc6b9d00fee00000000000000000000000000000000000000000000000000000bc6b9d00fee0000000000000000000000000000000000000000000000040600100000000000000000000000040, value: 0x0
Caller: [ATTACKER], function: isActive(), txdata: 0x22f3e2d4, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: A2ACrowdsale
Function name: start(uint256,uint256,address)
PC address: 6618
Estimated Gas Usage: 24510 - 106652
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/18170.sol:402

require(_startTimestamp >= block.timestamp)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: start(uint256,uint256,address), txdata: 0xa51fe113c000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000022333600000000000000000000000010, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: A2ACrowdsale
Function name: isSuccessful()
PC address: 9146
Estimated Gas Usage: 3167 - 3543
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/18170.sol:448

block.timestamp >= endTimestamp && totalCollected >= minimalGoal

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: isSuccessful(), txdata: 0xec4cd0cf, value: 0x0

