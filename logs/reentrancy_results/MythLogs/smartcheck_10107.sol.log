solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: MyToken
Function name: transfer(address,uint256)
PC address: 2169
Estimated Gas Usage: 14131 - 56023
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/10107.sol:128

receiver.tokenFallback(msg.sender, value, empty)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: MyToken
Function name: transfer(address,uint256,bytes)
PC address: 2916
Estimated Gas Usage: 14567 - 59940
Potential denial-of-service if block gas limit is reached.
A message call is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transfer(address,uint256,bytes), txdata: 0xbe45fd620000000000000000000000000000000000000000000000000000000000000028, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: MyToken
Function name: transfer(address,uint256,bytes)
PC address: 3016
Estimated Gas Usage: 14567 - 59940
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/10107.sol:114

receiver.tokenFallback(msg.sender, value, data)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256,bytes), txdata: 0xbe45fd62000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: MyToken
Function name: transfer(address,uint256,bytes,string)
PC address: 3636
Estimated Gas Usage: 14400 - 63391
Potential denial-of-service if block gas limit is reached.
A message call is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256,bytes,string), txdata: 0xf6368f8a0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: MyToken
Function name: transfer(address,uint256,bytes,string)
PC address: 3869
Estimated Gas Usage: 14306 - 63109
Potential denial-of-service if block gas limit is reached.
A message call is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256,bytes,string), txdata: 0xf6368f8a0000000000000000000000000000000000000000000000000000000000000028, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: MyToken
Function name: transfer(address,uint256,bytes,string)
PC address: 3952
Estimated Gas Usage: 14400 - 63391
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/10107.sol:139

to.call.value(0)(bytes4(keccak256(customFallback)), msg.sender, value, data)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256,bytes,string), txdata: 0xf6368f8a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffde80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: MyToken
Function name: transfer(address,uint256,bytes,string)
PC address: 3964
Estimated Gas Usage: 15130 - 98121
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/10107.sol:139

assert(to.call.value(0)(bytes4(keccak256(customFallback)), msg.sender, value, data))

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transfer(address,uint256,bytes,string), txdata: 0xf6368f8a0000000000000000000000000000000000000000000000000000000000000041a00000000f7e0100010021085cb040000000000000000000000000000000000080, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: MyToken
Function name: transfer(address,uint256,bytes,string)
PC address: 4120
Estimated Gas Usage: 15921 - 64133
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/10107.sol:141

Transfer(msg.sender, to, value, data)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: transfer(address,uint256,bytes,string), txdata: 0xf6368f8afffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe883f3998100000000000000000000000002000000000000000000000000000000080, value: 0x0

