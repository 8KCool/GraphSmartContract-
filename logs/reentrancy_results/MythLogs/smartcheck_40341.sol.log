solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExposedInternalsForTesting
Function name: validateNameInternalET(string)
PC address: 147
Estimated Gas Usage: 613 - 3669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/40341.sol:1138

function validateNameInternalET(string _name) constant
    returns (bool allowed) {
        return validateNameInternal(_name);
    }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: validateNameInternalET(string), txdata: 0x004056c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExposedInternalsForTesting
Function name: validateNameInternalET(string)
PC address: 153
Estimated Gas Usage: 1248 - 4490
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/40341.sol:1138

function validateNameInternalET(string _name) constant
    returns (bool allowed) {
        return validateNameInternal(_name);
    }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: validateNameInternalET(string), txdata: 0x004056c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: FundsHolderMixin
Function name: withdrawFunds()
PC address: 593
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/40341.sol:18

reentryProtector = false

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: withdrawFunds(), txdata: 0x24600fc3, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExposedInternalsForTesting
Function name: computeNameFuzzyHashET(string)
PC address: 638
Estimated Gas Usage: 1162 - 4404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/40341.sol:1148

function computeNameFuzzyHashET(string _name) constant
    returns (uint fuzzyHash) {
        return computeNameFuzzyHash(_name);
    }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: computeNameFuzzyHashET(string), txdata: 0xd331b696ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Kingdom
Function name: validateProposedMonarchName(string)
PC address: 943
Estimated Gas Usage: 767 - 3823
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/40341.sol:484

function validateProposedMonarchName(string _monarchName) constant
    returns (bool allowed) {
        return validateNameInternal(_monarchName);
    }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: validateProposedMonarchName(string), txdata: 0x67fc1c6afffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: FundsHolderMixin
Function name: withdrawFundsAdvanced(address,uint256,uint256)
PC address: 1005
Estimated Gas Usage: 12416 - 53737
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/40341.sol:31

_toAddress.call.value(_valueWei).gas(_extraGasIncluded)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: withdrawFundsAdvanced(address,uint256,uint256), txdata: 0xf4aa1291, value: 0x0
Caller: [ATTACKER], function: withdrawFundsAdvanced(address,uint256,uint256), txdata: 0xf4aa1291000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: Kingdom
Function name: withdrawFunds()
PC address: 1891
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/40341.sol:18

reentryProtector = false

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: withdrawFunds(), txdata: 0x24600fc3, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExposedInternalsForTesting
Function name: roundMoneyUpToWholeFinneyET(uint256)
PC address: 2071
Estimated Gas Usage: 371 - 747
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/40341.sol:143

1 finney + _valueWei

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: roundMoneyUpToWholeFinneyET(uint256), txdata: 0x06d0db26fffffffffffffffffffffffffffffffffffffffffffffffffffe, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: ExposedInternalsForTesting
Function name: roundMoneyUpToWholeFinneyET(uint256)
PC address: 2072
Estimated Gas Usage: 371 - 747
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: /tmp/40341.sol:143

1 finney + _valueWei - 1 wei

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: roundMoneyUpToWholeFinneyET(uint256), txdata: 0x06d0db26fffffffffffffffffffffffffffffffffffffffffffffffffffc72815b3980, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: World
Function name: kingdomsByNumber(uint256)
PC address: 2123
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/40341.sol:817

KingdomListing[] public kingdomsByNumber

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: kingdomsByNumber(uint256), txdata: 0x9ca77f3c02, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Kingdom
Function name: monarchsByNumber(uint256)
PC address: 2216
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/40341.sol:363

Monarch[] public monarchsByNumber

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: monarchsByNumber(uint256), txdata: 0x65f1791380, value: 0x0

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: World
Function name: validateProposedThroneRules(uint256,uint256,uint256,uint256)
PC address: 2650
Estimated Gas Usage: 2275 - 3456
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/40341.sol:898

kingdomFactory.validateProposedThroneRules(
            _startingClaimPriceWei,
            maximumClaimPriceWei,
            _claimPriceAdjustPercent,
            _curseIncubationDurationSeconds,
            _commissionPerThousand
        )

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: validateProposedThroneRules(uint256,uint256,uint256,uint256), txdata: 0xbcee6eb9, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: World
Function name: withdrawFunds()
PC address: 3075
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/40341.sol:18

reentryProtector = false

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: withdrawFunds(), txdata: 0x24600fc3, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Kingdom
Function name: currentClaimPriceInFinney()
PC address: 5606
Estimated Gas Usage: 1493 - 1869
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/40341.sol:143

1 finney + _valueWei

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: currentClaimPriceInFinney(), txdata: 0x80c951bf, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: Kingdom
Function name: currentClaimPriceInFinney()
PC address: 5607
Estimated Gas Usage: 1493 - 1869
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: /tmp/40341.sol:143

1 finney + _valueWei - 1 wei

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: currentClaimPriceInFinney(), txdata: 0x80c951bf, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: World
Function name: kingdomCreationFeeInFinney()
PC address: 7636
Estimated Gas Usage: 1062 - 1438
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/40341.sol:143

1 finney + _valueWei

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: kingdomCreationFeeInFinney(), txdata: 0xf831aee6, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: World
Function name: withdrawFundsAdvanced(address,uint256,uint256)
PC address: 7774
Estimated Gas Usage: 12724 - 54045
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/40341.sol:31

_toAddress.call.value(_valueWei).gas(_extraGasIncluded)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: withdrawFundsAdvanced(address,uint256,uint256), txdata: 0xf4aa1291000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Kingdom
Function name: withdrawFundsAdvanced(address,uint256,uint256)
PC address: 8076
Estimated Gas Usage: 12702 - 54023
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/40341.sol:31

_toAddress.call.value(_valueWei).gas(_extraGasIncluded)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: withdrawFundsAdvanced(address,uint256,uint256), txdata: 0xf4aa1291000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

