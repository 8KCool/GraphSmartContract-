==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: CrowdsaleWPTByRounds
Function name: fallback
PC address: 2207
Estimated Gas Usage: 10953 - 32179
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/347.sol:293

minterContract.mint(_beneficiary, tokens)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x470de4df820001

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CrowdsaleWPTByRounds
Function name: startNewRound(uint256,address,address,uint256,uint256,uint256)
PC address: 3408
Estimated Gas Usage: 32994 - 154079
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/347.sol:258

require(!hasOpened())

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: startNewRound(uint256,address,address,uint256,uint256,uint256), txdata: 0x85d37e97, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CrowdsaleWPTByRounds
Function name: hasOpened()
PC address: 3692
Estimated Gas Usage: 1467 - 1843
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/347.sol:276

openingTime < block.timestamp && block.timestamp < closingTime

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: hasOpened(), txdata: 0xbe8eef8e, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: CrowdsaleWPTByRounds
Function name: closeRound()
PC address: 4078
Estimated Gas Usage: 6112 - 26537
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/347.sol:223

block.timestamp + 1

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: closeRound(), txdata: 0xe278fe6f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CrowdsaleWPTByRounds
Function name: fallback
PC address: 4404
Estimated Gas Usage: 17045 - 108567
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/347.sol:178

block.timestamp >= openingTime && block.timestamp <= closingTime

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x470de4df820001

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CrowdsaleWPTByRounds
Function name: fallback
PC address: 4418
Estimated Gas Usage: 17045 - 108567
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/347.sol:178

require(block.timestamp >= openingTime && block.timestamp <= closingTime)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x470de4df820001

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: CrowdsaleWPTByRounds
Function name: fallback
PC address: 4704
Estimated Gas Usage: 14264 - 70824
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/347.sol:324

wallet.call.value(msg.value).gas(gasAmount)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x470de4df820001

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CrowdsaleWPTByRounds
Function name: fallback
PC address: 4704
Estimated Gas Usage: 17045 - 108567
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: /tmp/347.sol:324

wallet.call.value(msg.value).gas(gasAmount)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x470de4df820001

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: CrowdsaleWPTByRounds
Function name: fallback
PC address: 4704
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/347.sol:324

wallet.call.value(msg.value).gas(gasAmount)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x470de4df820001

==== Unchecked Call Return Value ====
SWC ID: 104
Severity: Low
Contract: CrowdsaleWPTByRounds
Function name: fallback
PC address: 4704
Estimated Gas Usage: 17045 - 108567
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: /tmp/347.sol:324

wallet.call.value(msg.value).gas(gasAmount)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x470de4df820001
