solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Log
Function name: AddMessage(address,uint256,string)
PC address: 163
Estimated Gas Usage: 60464 - 284795
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/22247.sol:60

function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: AddMessage(address,uint256,string), txdata: 0x4c2f04a4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Log
Function name: AddMessage(address,uint256,string)
PC address: 184
Estimated Gas Usage: 50324 - 234469
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/22247.sol:60

function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: AddMessage(address,uint256,string), txdata: 0x4c2f04a4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: PIGGY_BANK
Function name: Put(address)
PC address: 394
Estimated Gas Usage: 12885 - 88256
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/22247.sol:23

Accounts[to]+=msg.value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x1
Caller: [ATTACKER], function: Put(address), txdata: 0xe5b5fe72bebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

==== External Call To Fixed Address ====
SWC ID: 107
Severity: Low
Contract: PIGGY_BANK
Function name: Put(address)
PC address: 658
Estimated Gas Usage: 7130 - 28501
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: /tmp/22247.sol:24

LogFile.AddMessage(msg.sender,msg.value,"Put")

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: Put(address), txdata: 0xe5b5fe72, value: 0x0
Caller: [CREATOR], function: Put(address), txdata: 0xe5b5fe72, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: PIGGY_BANK
Function name: fallback
PC address: 685
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/22247.sol:25

putBlock = block.number

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: Log
Function name: AddMessage(address,uint256,string)
PC address: 745
Estimated Gas Usage: 60464 - 284795
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: /tmp/22247.sol:67

History.push(LastMsg)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: AddMessage(address,uint256,string), txdata: 0x4c2f04a40000000000000000000000000000000000000000000000000000000000000021, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Log
Function name: History(uint256)
PC address: 804
Estimated Gas Usage: 636 - 731
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/22247.sol:56

Message[] public History

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: AddMessage(address,uint256,string), txdata: 0x4c2f04a40000000000000000000000000000000000000000000000000000000000000021, value: 0x0
Caller: [CREATOR], function: History(uint256), txdata: 0xa21f036880, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: PIGGY_BANK
Function name: Collect(uint256)
PC address: 849
Estimated Gas Usage: 2038 - 2513
A control flow decision is made based on a predictable variable.
The block.number environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: /tmp/22247.sol:29

if(Accounts[msg.sender]>=MinSum && _am<=Accounts[msg.sender] && block.number>putBlock) {
            if(msg.sender.call.value(_am)()) {
                Accounts[msg.sender]-=_am;
                LogFile.AddMessage(msg.sender,_am,"Collect");
            }
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x01010101, value: 0xde0b6b3a7640000
Caller: [CREATOR], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: Low
Contract: Log
Function name: AddMessage(address,uint256,string)
PC address: 1105
Estimated Gas Usage: 50324 - 234469
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: AddMessage(address,uint256,string), txdata: 0x4c2f04a4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: Low
Contract: Log
Function name: AddMessage(address,uint256,string)
PC address: 1119
Estimated Gas Usage: 50324 - 234469
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: AddMessage(address,uint256,string), txdata: 0x4c2f04a4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1, value: 0x0

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: Log
Function name: AddMessage(address,uint256,string)
PC address: 1128
Estimated Gas Usage: 55443 - 259774
Potential denial-of-service if block gas limit is reached.
A storage modification is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: AddMessage(address,uint256,string), txdata: 0x4c2f04a40000000000000000000000000000000000000000000000000000000000000021, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: Low
Contract: Log
Function name: AddMessage(address,uint256,string)
PC address: 1180
Estimated Gas Usage: 60464 - 284795
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: AddMessage(address,uint256,string), txdata: 0x4c2f04a40000000000000000000000000000000000000000000000000000000000000021, value: 0x0

