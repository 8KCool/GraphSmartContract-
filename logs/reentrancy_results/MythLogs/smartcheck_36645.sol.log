solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: EnjinBuyer
Function name: fallback
PC address: 332
Estimated Gas Usage: 6031 - 26646
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: /tmp/36645.sol:110

balances[msg.sender] += msg.value

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x01010101, value: 0x1
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: EnjinBuyer
Function name: activate_kill_switch(string)
PC address: 6545
Estimated Gas Usage: 2491 - 7147
Potential denial-of-service if block gas limit is reached.
A storage modification is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit. This issue is reported for internal compiler generated code.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: activate_kill_switch(string), txdata: 0xd4701c3580, value: 0x0

