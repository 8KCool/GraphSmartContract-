solc successfully installed at: /root/.py-solc/solc-v0.4.25/bin/solc
==== Potential denial-of-service if block gas limit is reached ====
SWC ID: 128
Severity: Low
Contract: HODLWallet
Function name: addBalances(address[],uint256[])
PC address: 2330
Estimated Gas Usage: 27617 - 136495
Potential denial-of-service if block gas limit is reached.
A storage modification is executed in a loop. Be aware that the transaction may fail to execute if the loop is unbounded and the necessary gas exceeds the block gas limit.
--------------------
In file: /tmp/19128.sol:133

for (uint256 i = 0; i < addrs.length; i++) {
            balances[addrs[i]] = _balances[i];
            withdrawalCount[addrs[i]] = 0;
        }

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [CREATOR], function: addBalances(address[],uint256[]), txdata: 0xddf0c07080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: HODLWallet
Function name: withdraw(uint256)
PC address: 3391
Estimated Gas Usage: 7083 - 28124
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: /tmp/19128.sol:75

to.call.value(amount)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0

==== Unchecked Call Return Value ====
SWC ID: 104
Severity: Low
Contract: HODLWallet
Function name: withdraw(uint256)
PC address: 3391
Estimated Gas Usage: 13528 - 88949
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: /tmp/19128.sol:75

to.call.value(amount)()

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: HODLWallet
Function name: withdrawTo(address,uint256)
PC address: 3545
Estimated Gas Usage: None - None
The contract account state is changed after an external call.
Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.
--------------------
In file: /tmp/19128.sol:77

withdrawalCount[from] = withdrawalCount[from].add(1)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [SOMEGUY], function: withdrawTo(address,uint256), txdata: 0x205c2878000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HODLWallet
Function name: depositTo(address)
PC address: 3570
Estimated Gas Usage: 960 - 1245
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: /tmp/19128.sol:34

assert(c >= a)

--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x10802020, value: 0x1
Caller: [ATTACKER], function: depositTo(address), txdata: 0xb760faf9bebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

